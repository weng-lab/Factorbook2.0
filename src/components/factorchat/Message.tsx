import { getOverrides, MuiMarkdown } from 'mui-markdown'; //https://www.npmjs.com/package/mui-markdown
import { MessageBubble } from "./MessageBubble"
import { FactorChatFigure, FactorChatMessage } from "./types"
import { Accordion, AccordionDetails, AccordionSummary, Alert, Button, Typography } from "@mui/material";
import { ExpandMore, FileDownloadOutlined, InfoOutlined } from "@mui/icons-material";
import { DNALogo } from "logots-react";
import { getFileSize } from "./helpers";
import { useState, useEffect, useMemo } from "react";
import NextLink, { LinkProps as NextLinkProps } from "next/link";
import Link, { LinkProps } from "@mui/material/Link";
import MotifFigure from "./MotifFigure";

const Figure = (props: {figure: FactorChatFigure, index: number}) => {
  switch (props.figure.type) {
    case "logo": return <MotifFigure motifData={props.figure.data} index={props.index} onReverseComplement={(i) => null} />
    default: return <Alert severity="warning">Issue displaying figure of type {props.figure.type}</Alert>
  }
}

export const Message = (message: FactorChatMessage) => {
  const isUser = message.origin === "user"
  const isToolGenerated = !isUser && message.contents.tool_generated
  const contents = isUser ? message.contents : message.contents.text
  const error = isUser ? false : message.contents.error
  const figures = isUser ? [] : message.contents.figures
  const files = useMemo(() => isUser ? [] : message.contents.files, [])
  const [fileSizes, setFileSizes] = useState<{[key: string]: number | null}>({})

  useEffect(() => {
    const fetchFileSizes = async () => {
      const sizes: {[key: string]: number | null} = {}
      for (const file of files) {
        const size = await getFileSize(file.url)
        sizes[file.url] = size
      }
      setFileSizes(sizes)
    }
    
    fetchFileSizes()
  }, [files])

  //temporarily forcing all links to open in new tab, since existing links will be broken on the new site
  // Override <a> with Next.js <Link> to avoid hard navigation
  const LinkOpenInNew = (props: LinkProps) => <Link component={NextLink} {...props} rel="noopener noreferrer" target="_blank" />

  return (
    <MessageBubble isUser={isUser}>
      <MuiMarkdown
        overrides={{
          ...getOverrides({}),
          a: {
            component: LinkOpenInNew, 
          },
        }}
      >
        {error ? error : contents}
      </MuiMarkdown>
      {figures.length > 0 && figures.map((figure, i) =>
        <Figure figure={figure} index={i} key={i} />
      )}
      {/* Todo fetch file size and display */}
      {files.length > 0 && files.map((file, i) =>
        <Button
          href={file.url}
          fullWidth
          endIcon={<FileDownloadOutlined />}
          variant="contained"
          sx={{ justifyContent: "space-between", textTransform: "none" }}
          key={i}
          
        >
          <Typography
            variant="body2"
            sx={{ flexGrow: 1 }}
          >
            {file.description}
          </Typography>
          {fileSizes[file.url] !== undefined 
            ? `${((fileSizes[file.url] || 0) / 1000000).toFixed(1)} MB` 
            : 'Loading...'}
        </Button>
      )}
      {!isUser && !error &&
        <div>
          <Accordion sx={{ pointerEvents: isToolGenerated ? 'auto' : "none" }} elevation={0}>
            <AccordionSummary expandIcon={isToolGenerated && <ExpandMore />}>
              <InfoOutlined fontSize="small" color="primary" sx={{ mr: 1 }} />
              <Typography variant="body2">{isToolGenerated ? "Generated by calling a tool, expand for more info" : "Generated by an AI LLM"}</Typography>
            </AccordionSummary>
            <AccordionDetails>
              <Typography variant="body2">
                {message.contents.thoughts}
              </Typography>
            </AccordionDetails>
          </Accordion>
        </div>
      }
    </MessageBubble>
  )
}
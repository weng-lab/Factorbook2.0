/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\n    query MemeMotifs($peaks_accession: [String]) {\n        meme_motifs(peaks_accession: $peaks_accession) {\n            consensus_regex\n            pwm\n            sites\n            e_value\n            original_peaks_occurrences\n            original_peaks\n            flank_occurrences_ratio\n            flank_z_score\n            flank_p_value\n            shuffled_occurrences_ratio\n            shuffled_z_score\n            shuffled_p_value\n            peak_centrality\n            id\n            name\n        }\n        target_motifs(peaks_accessions: $peaks_accession, e_value_threshold: 1e-2) {\n            e_value\n            target_id\n            sites\n            jaspar_name\n            motifid\n        }\n    }\n": types.MemeMotifsDocument,
    "\n    query DeepLearnedMotifPeakOccurrences($genomic_region: [GenomicRegionInput!]!, $tf: String) {\n        deep_learned_motif_peak_occurrences(genomic_region: $genomic_region, tf: $tf) {\n            genomic_region {\n                chromosome\n                start\n                end\n            }\n            tf\n            sequence\n            rdhs\n            score\n            ppm\n            name\n            strand\n            number_of_datasets_instance_found_in\n            number_of_celltypes_instance_found_in\n            annotation\n            class_of_transposable_element\n        }\n    }\n": types.DeepLearnedMotifPeakOccurrencesDocument,
    "\n    query DLMotifsSelex(\n        $tf: String\n        $assay: String\n        $source: String\n        $selex_round: [Int]\n        $species: String\n        $protein_type: String\n        $accession: String\n    ) {\n        deep_learned_motifs(\n            tf: $tf\n            source: $source\n            assay: $assay\n            selex_round: $selex_round\n            species: $species\n            accession: $accession\n            protein_type: $protein_type\n        ) {\n            selex_round\n            ppm\n            roc_curve\n            au_roc\n            fractional_enrichment\n        }\n    }\n": types.DlMotifsSelexDocument,
    "\n    query DLMotifsSelexMetadata(\n        $tf: String\n        $assay: String\n        $source: String\n        $selex_round: [Int]\n        $species: String\n        $protein_type: String\n        $accession: String\n    ) {\n        deep_learned_motifs(\n            tf: $tf\n            source: $source\n            assay: $assay\n            selex_round: $selex_round\n            species: $species\n            accession: $accession\n            protein_type: $protein_type\n        ) {\n            selex_round\n            source\n            tf\n            assay\n            protein_type\n        }\n    }\n": types.DlMotifsSelexMetadataDocument,
    "\n    query DLMotifsNonSelex(\n        $tf: String\n        $assay: String\n        $source: String\n        $selex_round: [Int]\n        $species: String\n        $accession: String\n    ) {\n        deep_learned_motifs(\n            tf: $tf\n            source: $source\n            assay: $assay\n            selex_round: $selex_round\n            species: $species\n            accession: $accession\n        ) {\n            tf\n            ppm\n            total_number_of_datasets_instance_found_in\n            total_number_of_celltypes_instance_found_in\n            consensus_regex\n        }\n    }\n": types.DlMotifsNonSelexDocument,
    "\n    query LDSC($study: [String]){\n      iCRELdrQuery(study: $study) {\n        snps\n      }\n    }": types.LdscDocument,
    "\n  query CellType($name: [String], $assembly: String!) {\n    celltype(name: $name, assembly: $assembly) {\n      ct_image_url\n      wiki_desc\n    }\n  }\n": types.CellTypeDocument,
    "\n    query Dataset_Query(\n        $biosample: String\n        $processed_assembly: String\n        $replicated_peaks: Boolean\n        $include_investigatedas: [String]\n        $exclude_investigatedas: [String]\n    ) {\n        peakDataset(\n            biosample: $biosample\n            processed_assembly: $processed_assembly\n            replicated_peaks: $replicated_peaks\n            exclude_investigatedas: $exclude_investigatedas\n            include_investigatedas: $include_investigatedas\n        ) {\n            counts {\n                biosamples\n                targets\n                total\n            }\n            datasets {\n                lab {\n                    friendly_name\n                    name\n                }\n                target\n                released\n                accession\n                replicated_peaks: files(types: \"replicated_peaks\", assembly: $processed_assembly) {\n                    accession\n                }\n                released\n            }\n            partitionByTarget {\n                target {\n                    name\n                }\n                counts {\n                    total\n                    biosamples\n                }\n            }\n        }\n    }\n": types.Dataset_QueryDocument,
    "\n    query TF_INFO_Query(\n        $processed_assembly: String\n        $replicated_peaks: Boolean\n        $include_investigatedas: [String]\n        $exclude_investigatedas: [String]\n    ) {\n        peakDataset(\n            processed_assembly: $processed_assembly\n            replicated_peaks: $replicated_peaks\n            exclude_investigatedas: $exclude_investigatedas\n            include_investigatedas: $include_investigatedas\n        ) {\n            counts {\n                biosamples\n                targets\n                total\n            }\n            partitionByTarget {\n                target {\n                    name\n                }\n                counts {\n                    total\n                    biosamples\n                }\n            }\n            partitionByBiosample {\n                biosample {\n                    name\n                }\n                counts {\n                    total\n                    targets\n                }\n            }\n        }\n    }\n": types.Tf_Info_QueryDocument,
    "\n    query Experiment($accession: [String]) {\n        peakDataset(accession: $accession) {\n            datasets {\n                lab {\n                    friendly_name\n                }\n                released\n                target\n                biosample\n                species\n                files(types: [\"replicated_peaks\"]) {\n                    accession\n                    ... on ReplicatedPeaks {\n                        assembly {\n                            name\n                        }\n                    }\n                }\n            }\n        }\n    }\n": types.ExperimentDocument,
    "\n    query DatasetsQuery(\n        $target: String\n        $processed_assembly: String\n        $replicated_peaks: Boolean\n        $include_investigatedas: [String]\n        $exclude_investigatedas: [String]\n    ) {\n        peakDataset(\n            target: $target\n            processed_assembly: $processed_assembly\n            replicated_peaks: $replicated_peaks\n            exclude_investigatedas: $exclude_investigatedas\n            include_investigatedas: $include_investigatedas\n        ) {\n            counts {\n                total\n            }\n            datasets {\n                lab {\n                    friendly_name\n                    name\n                }\n                biosample\n                released\n                accession\n                replicated_peaks: files(types: \"replicated_peaks\", assembly: $processed_assembly) {\n                    accession\n                }\n                released\n            }\n            partitionByBiosample {\n                biosample {\n                    name\n                }\n                counts {\n                    total\n                    targets\n                }\n                datasets {\n                    lab {\n                        friendly_name\n                        name\n                    }\n                    accession\n                    replicated_peaks: files(types: \"replicated_peaks\", assembly: $processed_assembly) {\n                        accession\n                    }\n                }\n            }\n        }\n    }\n": types.DatasetsQueryDocument,
    "\n    query Factor($id: [String], $name: [String], $assembly: String!) {\n        factor(id: $id, name: $name, assembly: $assembly) {\n            name\n            gene_id\n            coordinates {\n                start\n                end\n                chromosome\n            }\n            pdbids\n            modifications {\n                symbol\n                modification {\n                    position\n                    modification\n                    amino_acid_code\n                }\n            }\n            ensemble_data {\n                id\n                biotype\n                description\n                display_name\n                hgnc_synonyms\n                hgnc_primary_id\n                uniprot_synonyms\n                uniprot_primary_id\n                version\n                ccds_id\n            }\n            hgnc_data {\n                hgnc_id\n                symbol\n                name\n                uniprot_ids\n                locus_type\n                locus_group\n                location\n                prev_name\n                gene_group\n                gene_group_id\n                ccds_id\n            }\n            uniprot_data\n            ncbi_data\n            factor_wiki\n        }\n    }\n": types.FactorDocument,
    "\n    query Datasets(\n        $processed_assembly: String\n        $replicated_peaks: Boolean\n        $include_investigatedas: [String]\n        $exclude_investigatedas: [String]\n    ) {\n        peakDataset(\n            processed_assembly: $processed_assembly\n            replicated_peaks: $replicated_peaks\n            exclude_investigatedas: $exclude_investigatedas\n            include_investigatedas: $include_investigatedas\n        ) {\n            counts {\n                biosamples\n                targets\n                total\n            }\n            partitionByTarget {\n                target {\n                    name\n                }\n                counts {\n                    total\n                    biosamples\n                }\n            }\n            partitionByBiosample {\n                biosample {\n                    name\n                }\n                counts {\n                    total\n                    targets\n                }\n            }\n        }\n    }\n": types.DatasetsDocument,
    "\n    query DLMotifsCounts(\n        $tf: String\n        $assay: String\n        $source: String\n        $selex_round: [Int]\n        $species: String\n        $accession: String\n    ) {\n        deep_learned_motifs_counts(\n            tf: $tf\n            source: $source\n            assay: $assay\n            selex_round: $selex_round\n            species: $species\n            accession: $accession\n        ) {\n            nonselexdlmotifs\n            selexdlmotifs\n        }\n    }\n": types.DlMotifsCountsDocument,
    "\n  query geneexpression($assembly: String!, $gene_id: [String], $assay_term_name: [String]) {\n    gene_dataset(assay_term_name: $assay_term_name) {\n      biosample\n      tissue\n      biosample_type\n      accession\n      gene_quantification_files(assembly: $assembly) {\n        accession\n        quantifications(gene_id_prefix: $gene_id) {\n          tpm\n        }\n      }\n    }\n  }\n": types.GeneexpressionDocument,
    "\n  query geneid($assembly: String!, $gene_name: [String]) {\n    gene(assembly: $assembly, name: $gene_name) {\n      id\n    }\n  }\n": types.GeneidDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query MemeMotifs($peaks_accession: [String]) {\n        meme_motifs(peaks_accession: $peaks_accession) {\n            consensus_regex\n            pwm\n            sites\n            e_value\n            original_peaks_occurrences\n            original_peaks\n            flank_occurrences_ratio\n            flank_z_score\n            flank_p_value\n            shuffled_occurrences_ratio\n            shuffled_z_score\n            shuffled_p_value\n            peak_centrality\n            id\n            name\n        }\n        target_motifs(peaks_accessions: $peaks_accession, e_value_threshold: 1e-2) {\n            e_value\n            target_id\n            sites\n            jaspar_name\n            motifid\n        }\n    }\n"): (typeof documents)["\n    query MemeMotifs($peaks_accession: [String]) {\n        meme_motifs(peaks_accession: $peaks_accession) {\n            consensus_regex\n            pwm\n            sites\n            e_value\n            original_peaks_occurrences\n            original_peaks\n            flank_occurrences_ratio\n            flank_z_score\n            flank_p_value\n            shuffled_occurrences_ratio\n            shuffled_z_score\n            shuffled_p_value\n            peak_centrality\n            id\n            name\n        }\n        target_motifs(peaks_accessions: $peaks_accession, e_value_threshold: 1e-2) {\n            e_value\n            target_id\n            sites\n            jaspar_name\n            motifid\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query DeepLearnedMotifPeakOccurrences($genomic_region: [GenomicRegionInput!]!, $tf: String) {\n        deep_learned_motif_peak_occurrences(genomic_region: $genomic_region, tf: $tf) {\n            genomic_region {\n                chromosome\n                start\n                end\n            }\n            tf\n            sequence\n            rdhs\n            score\n            ppm\n            name\n            strand\n            number_of_datasets_instance_found_in\n            number_of_celltypes_instance_found_in\n            annotation\n            class_of_transposable_element\n        }\n    }\n"): (typeof documents)["\n    query DeepLearnedMotifPeakOccurrences($genomic_region: [GenomicRegionInput!]!, $tf: String) {\n        deep_learned_motif_peak_occurrences(genomic_region: $genomic_region, tf: $tf) {\n            genomic_region {\n                chromosome\n                start\n                end\n            }\n            tf\n            sequence\n            rdhs\n            score\n            ppm\n            name\n            strand\n            number_of_datasets_instance_found_in\n            number_of_celltypes_instance_found_in\n            annotation\n            class_of_transposable_element\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query DLMotifsSelex(\n        $tf: String\n        $assay: String\n        $source: String\n        $selex_round: [Int]\n        $species: String\n        $protein_type: String\n        $accession: String\n    ) {\n        deep_learned_motifs(\n            tf: $tf\n            source: $source\n            assay: $assay\n            selex_round: $selex_round\n            species: $species\n            accession: $accession\n            protein_type: $protein_type\n        ) {\n            selex_round\n            ppm\n            roc_curve\n            au_roc\n            fractional_enrichment\n        }\n    }\n"): (typeof documents)["\n    query DLMotifsSelex(\n        $tf: String\n        $assay: String\n        $source: String\n        $selex_round: [Int]\n        $species: String\n        $protein_type: String\n        $accession: String\n    ) {\n        deep_learned_motifs(\n            tf: $tf\n            source: $source\n            assay: $assay\n            selex_round: $selex_round\n            species: $species\n            accession: $accession\n            protein_type: $protein_type\n        ) {\n            selex_round\n            ppm\n            roc_curve\n            au_roc\n            fractional_enrichment\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query DLMotifsSelexMetadata(\n        $tf: String\n        $assay: String\n        $source: String\n        $selex_round: [Int]\n        $species: String\n        $protein_type: String\n        $accession: String\n    ) {\n        deep_learned_motifs(\n            tf: $tf\n            source: $source\n            assay: $assay\n            selex_round: $selex_round\n            species: $species\n            accession: $accession\n            protein_type: $protein_type\n        ) {\n            selex_round\n            source\n            tf\n            assay\n            protein_type\n        }\n    }\n"): (typeof documents)["\n    query DLMotifsSelexMetadata(\n        $tf: String\n        $assay: String\n        $source: String\n        $selex_round: [Int]\n        $species: String\n        $protein_type: String\n        $accession: String\n    ) {\n        deep_learned_motifs(\n            tf: $tf\n            source: $source\n            assay: $assay\n            selex_round: $selex_round\n            species: $species\n            accession: $accession\n            protein_type: $protein_type\n        ) {\n            selex_round\n            source\n            tf\n            assay\n            protein_type\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query DLMotifsNonSelex(\n        $tf: String\n        $assay: String\n        $source: String\n        $selex_round: [Int]\n        $species: String\n        $accession: String\n    ) {\n        deep_learned_motifs(\n            tf: $tf\n            source: $source\n            assay: $assay\n            selex_round: $selex_round\n            species: $species\n            accession: $accession\n        ) {\n            tf\n            ppm\n            total_number_of_datasets_instance_found_in\n            total_number_of_celltypes_instance_found_in\n            consensus_regex\n        }\n    }\n"): (typeof documents)["\n    query DLMotifsNonSelex(\n        $tf: String\n        $assay: String\n        $source: String\n        $selex_round: [Int]\n        $species: String\n        $accession: String\n    ) {\n        deep_learned_motifs(\n            tf: $tf\n            source: $source\n            assay: $assay\n            selex_round: $selex_round\n            species: $species\n            accession: $accession\n        ) {\n            tf\n            ppm\n            total_number_of_datasets_instance_found_in\n            total_number_of_celltypes_instance_found_in\n            consensus_regex\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query LDSC($study: [String]){\n      iCRELdrQuery(study: $study) {\n        snps\n      }\n    }"): (typeof documents)["\n    query LDSC($study: [String]){\n      iCRELdrQuery(study: $study) {\n        snps\n      }\n    }"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query CellType($name: [String], $assembly: String!) {\n    celltype(name: $name, assembly: $assembly) {\n      ct_image_url\n      wiki_desc\n    }\n  }\n"): (typeof documents)["\n  query CellType($name: [String], $assembly: String!) {\n    celltype(name: $name, assembly: $assembly) {\n      ct_image_url\n      wiki_desc\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query Dataset_Query(\n        $biosample: String\n        $processed_assembly: String\n        $replicated_peaks: Boolean\n        $include_investigatedas: [String]\n        $exclude_investigatedas: [String]\n    ) {\n        peakDataset(\n            biosample: $biosample\n            processed_assembly: $processed_assembly\n            replicated_peaks: $replicated_peaks\n            exclude_investigatedas: $exclude_investigatedas\n            include_investigatedas: $include_investigatedas\n        ) {\n            counts {\n                biosamples\n                targets\n                total\n            }\n            datasets {\n                lab {\n                    friendly_name\n                    name\n                }\n                target\n                released\n                accession\n                replicated_peaks: files(types: \"replicated_peaks\", assembly: $processed_assembly) {\n                    accession\n                }\n                released\n            }\n            partitionByTarget {\n                target {\n                    name\n                }\n                counts {\n                    total\n                    biosamples\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query Dataset_Query(\n        $biosample: String\n        $processed_assembly: String\n        $replicated_peaks: Boolean\n        $include_investigatedas: [String]\n        $exclude_investigatedas: [String]\n    ) {\n        peakDataset(\n            biosample: $biosample\n            processed_assembly: $processed_assembly\n            replicated_peaks: $replicated_peaks\n            exclude_investigatedas: $exclude_investigatedas\n            include_investigatedas: $include_investigatedas\n        ) {\n            counts {\n                biosamples\n                targets\n                total\n            }\n            datasets {\n                lab {\n                    friendly_name\n                    name\n                }\n                target\n                released\n                accession\n                replicated_peaks: files(types: \"replicated_peaks\", assembly: $processed_assembly) {\n                    accession\n                }\n                released\n            }\n            partitionByTarget {\n                target {\n                    name\n                }\n                counts {\n                    total\n                    biosamples\n                }\n            }\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query TF_INFO_Query(\n        $processed_assembly: String\n        $replicated_peaks: Boolean\n        $include_investigatedas: [String]\n        $exclude_investigatedas: [String]\n    ) {\n        peakDataset(\n            processed_assembly: $processed_assembly\n            replicated_peaks: $replicated_peaks\n            exclude_investigatedas: $exclude_investigatedas\n            include_investigatedas: $include_investigatedas\n        ) {\n            counts {\n                biosamples\n                targets\n                total\n            }\n            partitionByTarget {\n                target {\n                    name\n                }\n                counts {\n                    total\n                    biosamples\n                }\n            }\n            partitionByBiosample {\n                biosample {\n                    name\n                }\n                counts {\n                    total\n                    targets\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query TF_INFO_Query(\n        $processed_assembly: String\n        $replicated_peaks: Boolean\n        $include_investigatedas: [String]\n        $exclude_investigatedas: [String]\n    ) {\n        peakDataset(\n            processed_assembly: $processed_assembly\n            replicated_peaks: $replicated_peaks\n            exclude_investigatedas: $exclude_investigatedas\n            include_investigatedas: $include_investigatedas\n        ) {\n            counts {\n                biosamples\n                targets\n                total\n            }\n            partitionByTarget {\n                target {\n                    name\n                }\n                counts {\n                    total\n                    biosamples\n                }\n            }\n            partitionByBiosample {\n                biosample {\n                    name\n                }\n                counts {\n                    total\n                    targets\n                }\n            }\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query Experiment($accession: [String]) {\n        peakDataset(accession: $accession) {\n            datasets {\n                lab {\n                    friendly_name\n                }\n                released\n                target\n                biosample\n                species\n                files(types: [\"replicated_peaks\"]) {\n                    accession\n                    ... on ReplicatedPeaks {\n                        assembly {\n                            name\n                        }\n                    }\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query Experiment($accession: [String]) {\n        peakDataset(accession: $accession) {\n            datasets {\n                lab {\n                    friendly_name\n                }\n                released\n                target\n                biosample\n                species\n                files(types: [\"replicated_peaks\"]) {\n                    accession\n                    ... on ReplicatedPeaks {\n                        assembly {\n                            name\n                        }\n                    }\n                }\n            }\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query DatasetsQuery(\n        $target: String\n        $processed_assembly: String\n        $replicated_peaks: Boolean\n        $include_investigatedas: [String]\n        $exclude_investigatedas: [String]\n    ) {\n        peakDataset(\n            target: $target\n            processed_assembly: $processed_assembly\n            replicated_peaks: $replicated_peaks\n            exclude_investigatedas: $exclude_investigatedas\n            include_investigatedas: $include_investigatedas\n        ) {\n            counts {\n                total\n            }\n            datasets {\n                lab {\n                    friendly_name\n                    name\n                }\n                biosample\n                released\n                accession\n                replicated_peaks: files(types: \"replicated_peaks\", assembly: $processed_assembly) {\n                    accession\n                }\n                released\n            }\n            partitionByBiosample {\n                biosample {\n                    name\n                }\n                counts {\n                    total\n                    targets\n                }\n                datasets {\n                    lab {\n                        friendly_name\n                        name\n                    }\n                    accession\n                    replicated_peaks: files(types: \"replicated_peaks\", assembly: $processed_assembly) {\n                        accession\n                    }\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query DatasetsQuery(\n        $target: String\n        $processed_assembly: String\n        $replicated_peaks: Boolean\n        $include_investigatedas: [String]\n        $exclude_investigatedas: [String]\n    ) {\n        peakDataset(\n            target: $target\n            processed_assembly: $processed_assembly\n            replicated_peaks: $replicated_peaks\n            exclude_investigatedas: $exclude_investigatedas\n            include_investigatedas: $include_investigatedas\n        ) {\n            counts {\n                total\n            }\n            datasets {\n                lab {\n                    friendly_name\n                    name\n                }\n                biosample\n                released\n                accession\n                replicated_peaks: files(types: \"replicated_peaks\", assembly: $processed_assembly) {\n                    accession\n                }\n                released\n            }\n            partitionByBiosample {\n                biosample {\n                    name\n                }\n                counts {\n                    total\n                    targets\n                }\n                datasets {\n                    lab {\n                        friendly_name\n                        name\n                    }\n                    accession\n                    replicated_peaks: files(types: \"replicated_peaks\", assembly: $processed_assembly) {\n                        accession\n                    }\n                }\n            }\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query Factor($id: [String], $name: [String], $assembly: String!) {\n        factor(id: $id, name: $name, assembly: $assembly) {\n            name\n            gene_id\n            coordinates {\n                start\n                end\n                chromosome\n            }\n            pdbids\n            modifications {\n                symbol\n                modification {\n                    position\n                    modification\n                    amino_acid_code\n                }\n            }\n            ensemble_data {\n                id\n                biotype\n                description\n                display_name\n                hgnc_synonyms\n                hgnc_primary_id\n                uniprot_synonyms\n                uniprot_primary_id\n                version\n                ccds_id\n            }\n            hgnc_data {\n                hgnc_id\n                symbol\n                name\n                uniprot_ids\n                locus_type\n                locus_group\n                location\n                prev_name\n                gene_group\n                gene_group_id\n                ccds_id\n            }\n            uniprot_data\n            ncbi_data\n            factor_wiki\n        }\n    }\n"): (typeof documents)["\n    query Factor($id: [String], $name: [String], $assembly: String!) {\n        factor(id: $id, name: $name, assembly: $assembly) {\n            name\n            gene_id\n            coordinates {\n                start\n                end\n                chromosome\n            }\n            pdbids\n            modifications {\n                symbol\n                modification {\n                    position\n                    modification\n                    amino_acid_code\n                }\n            }\n            ensemble_data {\n                id\n                biotype\n                description\n                display_name\n                hgnc_synonyms\n                hgnc_primary_id\n                uniprot_synonyms\n                uniprot_primary_id\n                version\n                ccds_id\n            }\n            hgnc_data {\n                hgnc_id\n                symbol\n                name\n                uniprot_ids\n                locus_type\n                locus_group\n                location\n                prev_name\n                gene_group\n                gene_group_id\n                ccds_id\n            }\n            uniprot_data\n            ncbi_data\n            factor_wiki\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query Datasets(\n        $processed_assembly: String\n        $replicated_peaks: Boolean\n        $include_investigatedas: [String]\n        $exclude_investigatedas: [String]\n    ) {\n        peakDataset(\n            processed_assembly: $processed_assembly\n            replicated_peaks: $replicated_peaks\n            exclude_investigatedas: $exclude_investigatedas\n            include_investigatedas: $include_investigatedas\n        ) {\n            counts {\n                biosamples\n                targets\n                total\n            }\n            partitionByTarget {\n                target {\n                    name\n                }\n                counts {\n                    total\n                    biosamples\n                }\n            }\n            partitionByBiosample {\n                biosample {\n                    name\n                }\n                counts {\n                    total\n                    targets\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query Datasets(\n        $processed_assembly: String\n        $replicated_peaks: Boolean\n        $include_investigatedas: [String]\n        $exclude_investigatedas: [String]\n    ) {\n        peakDataset(\n            processed_assembly: $processed_assembly\n            replicated_peaks: $replicated_peaks\n            exclude_investigatedas: $exclude_investigatedas\n            include_investigatedas: $include_investigatedas\n        ) {\n            counts {\n                biosamples\n                targets\n                total\n            }\n            partitionByTarget {\n                target {\n                    name\n                }\n                counts {\n                    total\n                    biosamples\n                }\n            }\n            partitionByBiosample {\n                biosample {\n                    name\n                }\n                counts {\n                    total\n                    targets\n                }\n            }\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query DLMotifsCounts(\n        $tf: String\n        $assay: String\n        $source: String\n        $selex_round: [Int]\n        $species: String\n        $accession: String\n    ) {\n        deep_learned_motifs_counts(\n            tf: $tf\n            source: $source\n            assay: $assay\n            selex_round: $selex_round\n            species: $species\n            accession: $accession\n        ) {\n            nonselexdlmotifs\n            selexdlmotifs\n        }\n    }\n"): (typeof documents)["\n    query DLMotifsCounts(\n        $tf: String\n        $assay: String\n        $source: String\n        $selex_round: [Int]\n        $species: String\n        $accession: String\n    ) {\n        deep_learned_motifs_counts(\n            tf: $tf\n            source: $source\n            assay: $assay\n            selex_round: $selex_round\n            species: $species\n            accession: $accession\n        ) {\n            nonselexdlmotifs\n            selexdlmotifs\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query geneexpression($assembly: String!, $gene_id: [String], $assay_term_name: [String]) {\n    gene_dataset(assay_term_name: $assay_term_name) {\n      biosample\n      tissue\n      biosample_type\n      accession\n      gene_quantification_files(assembly: $assembly) {\n        accession\n        quantifications(gene_id_prefix: $gene_id) {\n          tpm\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query geneexpression($assembly: String!, $gene_id: [String], $assay_term_name: [String]) {\n    gene_dataset(assay_term_name: $assay_term_name) {\n      biosample\n      tissue\n      biosample_type\n      accession\n      gene_quantification_files(assembly: $assembly) {\n        accession\n        quantifications(gene_id_prefix: $gene_id) {\n          tpm\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query geneid($assembly: String!, $gene_name: [String]) {\n    gene(assembly: $assembly, name: $gene_name) {\n      id\n    }\n  }\n"): (typeof documents)["\n  query geneid($assembly: String!, $gene_name: [String]) {\n    gene(assembly: $assembly, name: $gene_name) {\n      id\n    }\n  }\n"];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;
/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "\n    query CellType1($name: [String], $assembly: String!) {\n        celltype(name: $name, assembly: $assembly) {\n            ct_image_url\n            wiki_desc\n            celltype\n        }\n    }\n": typeof types.CellType1Document,
    "\n    query Datasets2(\n        $biosample: String\n        $processed_assembly: String\n        $replicated_peaks: Boolean\n        $include_investigatedas: [String]\n        $exclude_investigatedas: [String]\n    ) {\n        peakDataset(\n            biosample: $biosample\n            processed_assembly: $processed_assembly\n            replicated_peaks: $replicated_peaks\n            exclude_investigatedas: $exclude_investigatedas\n            include_investigatedas: $include_investigatedas\n        ) {\n            counts {\n                biosamples\n                targets\n                total\n            }\n            datasets {\n                lab {\n                    friendly_name\n                    name\n                }\n                target\n                released\n                accession\n                replicated_peaks: files(types: \"replicated_peaks\", assembly: $processed_assembly) {\n                    accession\n                }\n                released\n            }\n            partitionByTarget {\n                target {\n                    name\n                }\n                counts {\n                    total\n                    biosamples\n                }\n            }\n        }\n    }\n": typeof types.Datasets2Document,
    "\n  query Target_Query($accession: [String]) {\n    peakDataset(accession: $accession) {\n      datasets {    \n        target\n        species\n      }\n    }\n  }\n": typeof types.Target_QueryDocument,
    "\n    query maf($positions: [PositionInput!]!) {\n        maf(positions: $positions) {\n            snp\n            refAllele\n            minorAlleles {\n                sequence\n                afr_af\n                amr_af\n                eas_af\n                eur_af\n                sas_af\n                frequency\n            }\n            position {\n                chromosome\n                position\n            }\n        }\n    }\n": typeof types.MafDocument,
    "\n    query snp(\n        $snpids: [String]\n        $assembly: String!\n        $population: Population!\n        $subpopulation: SubPopulation\n        $rSquaredThreshold: Float\n    ) {\n        snpQuery(snpids: $snpids, assembly: $assembly) {\n            refAllele\n            refFrequency\n            id\n            minorAlleleFrequency {\n                sequence\n                afr_af\n                amr_af\n                eas_af\n                eur_af\n                sas_af\n            }\n            coordinates {\n                chromosome\n                start\n                end\n            }\n            linkageDisequilibrium(\n                population: $population\n                subpopulation: $subpopulation\n                rSquaredThreshold: $rSquaredThreshold\n            ) {\n                rSquared\n                snp(assembly: $assembly) {\n                    refAllele\n                    refFrequency\n                    id\n                    minorAlleleFrequency {\n                        sequence\n                        afr_af\n                        amr_af\n                        eas_af\n                        eur_af\n                        sas_af\n                    }\n                    coordinates {\n                        chromosome\n                        start\n                        end\n                    }\n                }\n            }\n        }\n    }\n": typeof types.SnpDocument,
    "\n    query peaks($assembly: String!, $range: [ChromosomeRangeInput]!) {\n        peaks(assembly: $assembly, range: $range) {\n            peaks {\n                q_value\n                experiment_accession\n                file_accession\n                dataset {\n                    target\n                    biosample\n                }\n                chrom\n                chrom_start\n                chrom_end\n            }\n        }\n    }\n": typeof types.PeaksDocument,
    "\n    query occurrences1($range: [GenomicRegionInput!]) {\n        meme_occurrences(genomic_region: $range) {\n            motif {\n                pwm\n                peaks_file {\n                    assembly\n                    accession\n                    dataset_accession\n                }\n                tomtom_matches {\n                    jaspar_name\n                    target_id\n                    e_value\n                }\n                flank_p_value\n                shuffled_p_value\n            }\n            strand\n            q_value\n            genomic_region {\n                chromosome\n                start\n                end\n            }\n        }\n    }\n": typeof types.Occurrences1Document,
    "\n    query occurrences2($range: [GenomicRegionInput!]!) {\n        rdhs_motif_occurrences(genomic_region: $range) {\n            motif {\n                pwm\n                peaks_file {\n                    assembly\n                    accession\n                    dataset_accession\n                }\n                tomtom_matches {\n                    jaspar_name\n                    target_id\n                    e_value\n                }\n                flank_p_value\n                shuffled_p_value\n            }\n            rdhs\n            strand\n            p_value\n            genomic_region {\n                chromosome\n                start\n                end\n            }\n        }\n    }\n": typeof types.Occurrences2Document,
    "\n    query experiment_accessions(\n        $target: String\n        $processed_assembly: String\n        $replicated_peaks: Boolean\n        $include_investigatedas: [String]\n        $exclude_investigatedas: [String]\n    ) {\n        peakDataset(\n            target: $target\n            processed_assembly: $processed_assembly\n            replicated_peaks: $replicated_peaks\n            exclude_investigatedas: $exclude_investigatedas\n            include_investigatedas: $include_investigatedas\n        ) {\n            partitionByBiosample {\n                biosample {\n                    name\n                }\n                counts {\n                    total\n                    targets\n                }\n                datasets {\n                    lab {\n                        friendly_name\n                    }\n                    source\n                    biosample\n                    accession\n                    replicated_peaks: files(types: \"replicated_peaks\", assembly: $processed_assembly) {\n                        accession\n                    }\n                }\n            }\n        }\n    }\n": typeof types.Experiment_AccessionsDocument,
    "\n    query epigenetic_accessions($assembly: String!) {\n        histone_aggregate_values(assembly: $assembly) {\n            peaks_dataset_accession\n        }\n    }\n": typeof types.Epigenetic_AccessionsDocument,
    "\nquery signal($accession: [String], $assembly: String) {\n    peakDataset(accession: $accession) {\n      datasets {\n        files(types: [ \"normalized_signal\" ], assembly: $assembly) {\n          accession\n        }\n      }\n    }\n}\n": typeof types.SignalDocument,
    "\n    query MemeMotifs($peaks_accession: [String]) {\n        meme_motifs(peaks_accession: $peaks_accession) {\n            consensus_regex\n            pwm\n            sites\n            e_value\n            original_peaks_occurrences\n            original_peaks\n            flank_occurrences_ratio\n            flank_z_score\n            flank_p_value\n            shuffled_occurrences_ratio\n            shuffled_z_score\n            shuffled_p_value\n            peak_centrality\n            id\n            name\n        }\n        target_motifs(peaks_accessions: $peaks_accession, e_value_threshold: 1e-2) {\n            e_value\n            target_id\n            sites\n            jaspar_name\n            motifid\n        }\n    }\n": typeof types.MemeMotifsDocument,
    "\n    query peaksrange(\n        $experiment_accession: String\n        $file_accession: String\n        $target: String\n        $biosample: String\n        $range: [ChromosomeRangeInput]!\n        $assembly: String!\n        $limit: Int\n        $offset: Int\n        $orderby: Boolean\n    ) {\n        peaksrange(\n            experiment_accession: $experiment_accession\n            target: $target\n            biosample: $biosample\n            file_accession: $file_accession\n            range: $range\n            assembly: $assembly\n            limit: $limit\n            offset: $offset\n            orderby: $orderby\n        ) {\n            data\n            error {\n                message\n                errortype\n            }\n        }\n    }\n": typeof types.PeaksrangeDocument,
    "\n    query occurrences($range: [GenomicRegionInput!], $peaks_accession: String, $consensus_regex: String) {\n        meme_occurrences(genomic_region: $range, peaks_accession: $peaks_accession, consensus_regex: $consensus_regex) {\n            peaks_accession\n            strand\n            q_value\n            consensus_regex\n            genomic_region {\n                chromosome\n                start\n                end\n            }\n        }\n    }\n": typeof types.OccurrencesDocument,
    "\n    query motifsInPeak($genomic_region: [GenomicRegionInput!]!) {\n        meme_occurrences(genomic_region: $genomic_region) {\n            peaks_accession\n            consensus_regex\n            q_value\n            genomic_region {\n                chromosome\n                start\n                end\n            }\n            motif {\n                id\n                pwm\n                flank_z_score\n                flank_p_value\n                shuffled_z_score\n                shuffled_p_value\n            }\n        }\n    }\n": typeof types.MotifsInPeakDocument,
    "\n    query DeepLearnedMotifPeakOccurrences($genomic_region: [GenomicRegionInput!]!, $tf: String) {\n        deep_learned_motif_peak_occurrences(genomic_region: $genomic_region, tf: $tf) {\n            genomic_region {\n                chromosome\n                start\n                end\n            }\n            tf\n            sequence\n            rdhs\n            score\n            ppm\n            name\n            strand\n            number_of_datasets_instance_found_in\n            number_of_celltypes_instance_found_in\n            annotation\n            class_of_transposable_element\n        }\n    }\n": typeof types.DeepLearnedMotifPeakOccurrencesDocument,
    "\n    query DLMotifsSelex(\n        $tf: String\n        $assay: String\n        $source: String\n        $selex_round: [Int]\n        $species: String\n        $protein_type: String\n        $accession: String\n    ) {\n        deep_learned_motifs(\n            tf: $tf\n            source: $source\n            assay: $assay\n            selex_round: $selex_round\n            species: $species\n            accession: $accession\n            protein_type: $protein_type\n        ) {\n            selex_round\n            ppm\n            roc_curve\n            au_roc\n            fractional_enrichment\n        }\n    }\n": typeof types.DlMotifsSelexDocument,
    "\n    query DLMotifsSelexMetadata(\n        $tf: String\n        $assay: String\n        $source: String\n        $selex_round: [Int]\n        $species: String\n        $protein_type: String\n        $accession: String\n    ) {\n        deep_learned_motifs(\n            tf: $tf\n            source: $source\n            assay: $assay\n            selex_round: $selex_round\n            species: $species\n            accession: $accession\n            protein_type: $protein_type\n        ) {\n            selex_round\n            source\n            tf\n            assay\n            protein_type\n        }\n    }\n": typeof types.DlMotifsSelexMetadataDocument,
    "\n    query tomtomMatches($peaks_accessions: [String!]!, $ids: [String!]!) {\n        target_motifs(peaks_accessions: $peaks_accessions, motif_id: $ids) {\n            target_id\n            e_value\n            jaspar_name\n        }\n    }\n": typeof types.TomtomMatchesDocument,
    "\n    query DLMotifsNonSelex(\n        $tf: String\n        $assay: String\n        $source: String\n        $selex_round: [Int]\n        $species: String\n        $accession: String\n    ) {\n        deep_learned_motifs(\n            tf: $tf\n            source: $source\n            assay: $assay\n            selex_round: $selex_round\n            species: $species\n            accession: $accession\n        ) {\n            tf\n            ppm\n            total_number_of_datasets_instance_found_in\n            total_number_of_celltypes_instance_found_in\n            consensus_regex\n        }\n    }\n": typeof types.DlMotifsNonSelexDocument,
    "\n  query CellType2($name: [String], $assembly: String!) {\n    celltype(name: $name, assembly: $assembly) {\n      ct_image_url\n      wiki_desc\n    }\n  }\n": typeof types.CellType2Document,
    "\n    query Dataset_Query(\n        $biosample: String\n        $processed_assembly: String\n        $replicated_peaks: Boolean\n        $include_investigatedas: [String]\n        $exclude_investigatedas: [String]\n    ) {\n        peakDataset(\n            biosample: $biosample\n            processed_assembly: $processed_assembly\n            replicated_peaks: $replicated_peaks\n            exclude_investigatedas: $exclude_investigatedas\n            include_investigatedas: $include_investigatedas\n        ) {\n            counts {\n                biosamples\n                targets\n                total\n            }\n            datasets {\n                lab {\n                    friendly_name\n                    name\n                }\n                target\n                released\n                accession\n                replicated_peaks: files(types: \"replicated_peaks\", assembly: $processed_assembly) {\n                    accession\n                }\n                released\n            }\n            partitionByTarget {\n                target {\n                    name\n                }\n                counts {\n                    total\n                    biosamples\n                }\n            }\n        }\n    }\n": typeof types.Dataset_QueryDocument,
    "\n    query TF_INFO_Query(\n        $processed_assembly: String\n        $replicated_peaks: Boolean\n        $include_investigatedas: [String]\n        $exclude_investigatedas: [String]\n    ) {\n        peakDataset(\n            processed_assembly: $processed_assembly\n            replicated_peaks: $replicated_peaks\n            exclude_investigatedas: $exclude_investigatedas\n            include_investigatedas: $include_investigatedas\n        ) {\n            counts {\n                biosamples\n                targets\n                total\n            }\n            partitionByTarget {\n                target {\n                    name\n                }\n                counts {\n                    total\n                    biosamples\n                }\n            }\n            partitionByBiosample {\n                biosample {\n                    name\n                }\n                counts {\n                    total\n                    targets\n                }\n            }\n        }\n    }\n": typeof types.Tf_Info_QueryDocument,
    "\n    query dnasemetadataquery($assembly: String!, $target: String!) {\n        histone_aggregate_values(assembly: $assembly) {\n            peaks_dataset_accession\n        }\n        peakDataset(processed_assembly: $assembly, target: $target) {\n            datasets {\n                accession\n                biosample\n            }\n        }\n    }\n": typeof types.DnasemetadataqueryDocument,
    "\n    query aggregate($accession: String!) {\n        histone_aggregate_values(peaks_dataset_accession: $accession) {\n            histone_dataset_accession\n            distal_values\n            proximal_values\n        }\n    }\n": typeof types.AggregateDocument,
    "\n    query metadata($accessions: [String!]) {\n        peakDataset(accession: $accessions) {\n            datasets {\n                accession\n                target\n            }\n        }\n    }\n": typeof types.MetadataDocument,
    "\n    query atacagg($peaks_accession: [String!], $motif: String) {\n        atac_aggregate(peaks_accession: $peaks_accession, motif: $motif) {\n            forward_values\n            reverse_values\n        }\n        dnase_aggregate(peaks_accession: $peaks_accession, motif: $motif) {\n            forward_values\n            reverse_values\n        }\n    }\n": typeof types.AtacaggDocument,
    "\n    query conservationagg($peaks_accession: [String!], $motif: String) {\n        conservation_aggregate(peaks_accession: $peaks_accession, motif: $motif) {\n            values\n            conservation_type\n        }\n    }\n": typeof types.ConservationaggDocument,
    "\n  query MemeMotifSearch(\n    $assembly: String!\n    $pwms: [[[Float!]]]!\n    $limit: Int!\n    $offset: Int!\n  ) {\n    meme_motif_search(\n      pwms: $pwms\n      assembly: $assembly\n      limit: $limit\n      offset: $offset\n    ) {\n      results {\n        motif {\n          pwm\n          peaks_accession\n          tomtom_matches {\n            target_id\n            jaspar_name\n            e_value\n          }\n        }\n        distance\n        offset\n        reverseComplement\n      }\n      total\n    }\n  }\n": typeof types.MemeMotifSearchDocument,
    "\n  query Experiment1($peak_accession: String) {\n    peakDataset(replicated_peak_accession: $peak_accession) {\n      datasets {\n        accession\n        lab {\n          friendly_name\n        }\n        target\n        biosample\n      }\n    }\n  }\n": typeof types.Experiment1Document,
    "\n    query geneexpression($assembly: String!,$gene_id: [String]) {\n        gene_dataset(processed_assembly: $assembly) {\n            biosample\n            tissue\n            biosample_type\n            assay_term_name\n            accession\n            gene_quantification_files(assembly: $assembly) {\n                accession\n                quantifications(gene_id_prefix: $gene_id) {\n                    tpm\n                }\n            }\n        }\n    }\n": typeof types.GeneexpressionDocument,
    "\n    query geneid($assembly: String!, $gene_name: [String]) {\n        gene(assembly: $assembly, name: $gene_name) {\n            id\n        }\n    }\n": typeof types.GeneidDocument,
    "\n    query Experiment2($accession: [String]) {\n        peakDataset(accession: $accession) {\n            datasets {\n                lab {\n                    friendly_name\n                }\n                released\n                target\n                biosample\n                species\n                files(types: [\"replicated_peaks\"]) {\n                    accession\n                    ... on ReplicatedPeaks {\n                        assembly {\n                            name\n                        }\n                    }\n                }\n            }\n        }\n    }\n": typeof types.Experiment2Document,
    "\n    query DatasetsQuery(\n        $target: String\n        $processed_assembly: String\n        $replicated_peaks: Boolean\n        $include_investigatedas: [String]\n        $exclude_investigatedas: [String]\n    ) {\n        peakDataset(\n            target: $target\n            processed_assembly: $processed_assembly\n            replicated_peaks: $replicated_peaks\n            exclude_investigatedas: $exclude_investigatedas\n            include_investigatedas: $include_investigatedas\n        ) {\n            counts {\n                total\n            }\n            datasets {\n                lab {\n                    friendly_name\n                    name\n                }\n                biosample\n                released\n                accession\n                replicated_peaks: files(types: \"replicated_peaks\", assembly: $processed_assembly) {\n                    accession\n                }\n                released\n            }\n            partitionByBiosample {\n                biosample {\n                    name\n                }\n                counts {\n                    total\n                    targets\n                }\n                datasets {\n                    lab {\n                        friendly_name\n                        name\n                    }\n                    accession\n                    replicated_peaks: files(types: \"replicated_peaks\", assembly: $processed_assembly) {\n                        accession\n                    }\n                }\n            }\n        }\n    }\n": typeof types.DatasetsQueryDocument,
    "\n    query Factor($id: [String], $name: [String], $assembly: String!) {\n        factor(id: $id, name: $name, assembly: $assembly) {\n            name\n            gene_id\n            coordinates {\n                start\n                end\n                chromosome\n            }\n            pdbids\n            modifications {\n                symbol\n                modification {\n                    position\n                    modification\n                    amino_acid_code\n                }\n            }\n            ensemble_data {\n                id\n                biotype\n                description\n                display_name\n                hgnc_synonyms\n                hgnc_primary_id\n                uniprot_synonyms\n                uniprot_primary_id\n                version\n                ccds_id\n            }\n            hgnc_data {\n                hgnc_id\n                symbol\n                name\n                uniprot_ids\n                locus_type\n                locus_group\n                location\n                prev_name\n                gene_group\n                gene_group_id\n                ccds_id\n            }\n            uniprot_data\n            ncbi_data\n            factor_wiki\n        }\n    }\n": typeof types.FactorDocument,
    "\n    query Datasets3(\n        $processed_assembly: String\n        $replicated_peaks: Boolean\n        $biosample: String\n        $include_investigatedas: [String]\n        $exclude_investigatedas: [String]\n    ) {\n        peakDataset(\n            processed_assembly: $processed_assembly\n            replicated_peaks: $replicated_peaks\n            biosample: $biosample\n            exclude_investigatedas: $exclude_investigatedas\n            include_investigatedas: $include_investigatedas\n        ) {\n            counts {\n                biosamples\n                targets\n                total\n            }\n            partitionByTarget {\n                target {\n                    name\n                }\n                counts {\n                    total\n                    biosamples\n                }\n            }\n            partitionByBiosample {\n                biosample {\n                    name\n                }\n                counts {\n                    total\n                    targets\n                }\n            }\n        }\n    }\n": typeof types.Datasets3Document,
    "\n    query DLMotifsCounts(\n        $tf: String\n        $assay: String\n        $source: String\n        $selex_round: [Int]\n        $species: String\n        $accession: String\n    ) {\n        deep_learned_motifs_counts(\n            tf: $tf\n            source: $source\n            assay: $assay\n            selex_round: $selex_round\n            species: $species\n            accession: $accession\n        ) {\n            nonselexdlmotifs\n            selexdlmotifs\n        }\n    }\n": typeof types.DlMotifsCountsDocument,
};
const documents: Documents = {
    "\n    query CellType1($name: [String], $assembly: String!) {\n        celltype(name: $name, assembly: $assembly) {\n            ct_image_url\n            wiki_desc\n            celltype\n        }\n    }\n": types.CellType1Document,
    "\n    query Datasets2(\n        $biosample: String\n        $processed_assembly: String\n        $replicated_peaks: Boolean\n        $include_investigatedas: [String]\n        $exclude_investigatedas: [String]\n    ) {\n        peakDataset(\n            biosample: $biosample\n            processed_assembly: $processed_assembly\n            replicated_peaks: $replicated_peaks\n            exclude_investigatedas: $exclude_investigatedas\n            include_investigatedas: $include_investigatedas\n        ) {\n            counts {\n                biosamples\n                targets\n                total\n            }\n            datasets {\n                lab {\n                    friendly_name\n                    name\n                }\n                target\n                released\n                accession\n                replicated_peaks: files(types: \"replicated_peaks\", assembly: $processed_assembly) {\n                    accession\n                }\n                released\n            }\n            partitionByTarget {\n                target {\n                    name\n                }\n                counts {\n                    total\n                    biosamples\n                }\n            }\n        }\n    }\n": types.Datasets2Document,
    "\n  query Target_Query($accession: [String]) {\n    peakDataset(accession: $accession) {\n      datasets {    \n        target\n        species\n      }\n    }\n  }\n": types.Target_QueryDocument,
    "\n    query maf($positions: [PositionInput!]!) {\n        maf(positions: $positions) {\n            snp\n            refAllele\n            minorAlleles {\n                sequence\n                afr_af\n                amr_af\n                eas_af\n                eur_af\n                sas_af\n                frequency\n            }\n            position {\n                chromosome\n                position\n            }\n        }\n    }\n": types.MafDocument,
    "\n    query snp(\n        $snpids: [String]\n        $assembly: String!\n        $population: Population!\n        $subpopulation: SubPopulation\n        $rSquaredThreshold: Float\n    ) {\n        snpQuery(snpids: $snpids, assembly: $assembly) {\n            refAllele\n            refFrequency\n            id\n            minorAlleleFrequency {\n                sequence\n                afr_af\n                amr_af\n                eas_af\n                eur_af\n                sas_af\n            }\n            coordinates {\n                chromosome\n                start\n                end\n            }\n            linkageDisequilibrium(\n                population: $population\n                subpopulation: $subpopulation\n                rSquaredThreshold: $rSquaredThreshold\n            ) {\n                rSquared\n                snp(assembly: $assembly) {\n                    refAllele\n                    refFrequency\n                    id\n                    minorAlleleFrequency {\n                        sequence\n                        afr_af\n                        amr_af\n                        eas_af\n                        eur_af\n                        sas_af\n                    }\n                    coordinates {\n                        chromosome\n                        start\n                        end\n                    }\n                }\n            }\n        }\n    }\n": types.SnpDocument,
    "\n    query peaks($assembly: String!, $range: [ChromosomeRangeInput]!) {\n        peaks(assembly: $assembly, range: $range) {\n            peaks {\n                q_value\n                experiment_accession\n                file_accession\n                dataset {\n                    target\n                    biosample\n                }\n                chrom\n                chrom_start\n                chrom_end\n            }\n        }\n    }\n": types.PeaksDocument,
    "\n    query occurrences1($range: [GenomicRegionInput!]) {\n        meme_occurrences(genomic_region: $range) {\n            motif {\n                pwm\n                peaks_file {\n                    assembly\n                    accession\n                    dataset_accession\n                }\n                tomtom_matches {\n                    jaspar_name\n                    target_id\n                    e_value\n                }\n                flank_p_value\n                shuffled_p_value\n            }\n            strand\n            q_value\n            genomic_region {\n                chromosome\n                start\n                end\n            }\n        }\n    }\n": types.Occurrences1Document,
    "\n    query occurrences2($range: [GenomicRegionInput!]!) {\n        rdhs_motif_occurrences(genomic_region: $range) {\n            motif {\n                pwm\n                peaks_file {\n                    assembly\n                    accession\n                    dataset_accession\n                }\n                tomtom_matches {\n                    jaspar_name\n                    target_id\n                    e_value\n                }\n                flank_p_value\n                shuffled_p_value\n            }\n            rdhs\n            strand\n            p_value\n            genomic_region {\n                chromosome\n                start\n                end\n            }\n        }\n    }\n": types.Occurrences2Document,
    "\n    query experiment_accessions(\n        $target: String\n        $processed_assembly: String\n        $replicated_peaks: Boolean\n        $include_investigatedas: [String]\n        $exclude_investigatedas: [String]\n    ) {\n        peakDataset(\n            target: $target\n            processed_assembly: $processed_assembly\n            replicated_peaks: $replicated_peaks\n            exclude_investigatedas: $exclude_investigatedas\n            include_investigatedas: $include_investigatedas\n        ) {\n            partitionByBiosample {\n                biosample {\n                    name\n                }\n                counts {\n                    total\n                    targets\n                }\n                datasets {\n                    lab {\n                        friendly_name\n                    }\n                    source\n                    biosample\n                    accession\n                    replicated_peaks: files(types: \"replicated_peaks\", assembly: $processed_assembly) {\n                        accession\n                    }\n                }\n            }\n        }\n    }\n": types.Experiment_AccessionsDocument,
    "\n    query epigenetic_accessions($assembly: String!) {\n        histone_aggregate_values(assembly: $assembly) {\n            peaks_dataset_accession\n        }\n    }\n": types.Epigenetic_AccessionsDocument,
    "\nquery signal($accession: [String], $assembly: String) {\n    peakDataset(accession: $accession) {\n      datasets {\n        files(types: [ \"normalized_signal\" ], assembly: $assembly) {\n          accession\n        }\n      }\n    }\n}\n": types.SignalDocument,
    "\n    query MemeMotifs($peaks_accession: [String]) {\n        meme_motifs(peaks_accession: $peaks_accession) {\n            consensus_regex\n            pwm\n            sites\n            e_value\n            original_peaks_occurrences\n            original_peaks\n            flank_occurrences_ratio\n            flank_z_score\n            flank_p_value\n            shuffled_occurrences_ratio\n            shuffled_z_score\n            shuffled_p_value\n            peak_centrality\n            id\n            name\n        }\n        target_motifs(peaks_accessions: $peaks_accession, e_value_threshold: 1e-2) {\n            e_value\n            target_id\n            sites\n            jaspar_name\n            motifid\n        }\n    }\n": types.MemeMotifsDocument,
    "\n    query peaksrange(\n        $experiment_accession: String\n        $file_accession: String\n        $target: String\n        $biosample: String\n        $range: [ChromosomeRangeInput]!\n        $assembly: String!\n        $limit: Int\n        $offset: Int\n        $orderby: Boolean\n    ) {\n        peaksrange(\n            experiment_accession: $experiment_accession\n            target: $target\n            biosample: $biosample\n            file_accession: $file_accession\n            range: $range\n            assembly: $assembly\n            limit: $limit\n            offset: $offset\n            orderby: $orderby\n        ) {\n            data\n            error {\n                message\n                errortype\n            }\n        }\n    }\n": types.PeaksrangeDocument,
    "\n    query occurrences($range: [GenomicRegionInput!], $peaks_accession: String, $consensus_regex: String) {\n        meme_occurrences(genomic_region: $range, peaks_accession: $peaks_accession, consensus_regex: $consensus_regex) {\n            peaks_accession\n            strand\n            q_value\n            consensus_regex\n            genomic_region {\n                chromosome\n                start\n                end\n            }\n        }\n    }\n": types.OccurrencesDocument,
    "\n    query motifsInPeak($genomic_region: [GenomicRegionInput!]!) {\n        meme_occurrences(genomic_region: $genomic_region) {\n            peaks_accession\n            consensus_regex\n            q_value\n            genomic_region {\n                chromosome\n                start\n                end\n            }\n            motif {\n                id\n                pwm\n                flank_z_score\n                flank_p_value\n                shuffled_z_score\n                shuffled_p_value\n            }\n        }\n    }\n": types.MotifsInPeakDocument,
    "\n    query DeepLearnedMotifPeakOccurrences($genomic_region: [GenomicRegionInput!]!, $tf: String) {\n        deep_learned_motif_peak_occurrences(genomic_region: $genomic_region, tf: $tf) {\n            genomic_region {\n                chromosome\n                start\n                end\n            }\n            tf\n            sequence\n            rdhs\n            score\n            ppm\n            name\n            strand\n            number_of_datasets_instance_found_in\n            number_of_celltypes_instance_found_in\n            annotation\n            class_of_transposable_element\n        }\n    }\n": types.DeepLearnedMotifPeakOccurrencesDocument,
    "\n    query DLMotifsSelex(\n        $tf: String\n        $assay: String\n        $source: String\n        $selex_round: [Int]\n        $species: String\n        $protein_type: String\n        $accession: String\n    ) {\n        deep_learned_motifs(\n            tf: $tf\n            source: $source\n            assay: $assay\n            selex_round: $selex_round\n            species: $species\n            accession: $accession\n            protein_type: $protein_type\n        ) {\n            selex_round\n            ppm\n            roc_curve\n            au_roc\n            fractional_enrichment\n        }\n    }\n": types.DlMotifsSelexDocument,
    "\n    query DLMotifsSelexMetadata(\n        $tf: String\n        $assay: String\n        $source: String\n        $selex_round: [Int]\n        $species: String\n        $protein_type: String\n        $accession: String\n    ) {\n        deep_learned_motifs(\n            tf: $tf\n            source: $source\n            assay: $assay\n            selex_round: $selex_round\n            species: $species\n            accession: $accession\n            protein_type: $protein_type\n        ) {\n            selex_round\n            source\n            tf\n            assay\n            protein_type\n        }\n    }\n": types.DlMotifsSelexMetadataDocument,
    "\n    query tomtomMatches($peaks_accessions: [String!]!, $ids: [String!]!) {\n        target_motifs(peaks_accessions: $peaks_accessions, motif_id: $ids) {\n            target_id\n            e_value\n            jaspar_name\n        }\n    }\n": types.TomtomMatchesDocument,
    "\n    query DLMotifsNonSelex(\n        $tf: String\n        $assay: String\n        $source: String\n        $selex_round: [Int]\n        $species: String\n        $accession: String\n    ) {\n        deep_learned_motifs(\n            tf: $tf\n            source: $source\n            assay: $assay\n            selex_round: $selex_round\n            species: $species\n            accession: $accession\n        ) {\n            tf\n            ppm\n            total_number_of_datasets_instance_found_in\n            total_number_of_celltypes_instance_found_in\n            consensus_regex\n        }\n    }\n": types.DlMotifsNonSelexDocument,
    "\n  query CellType2($name: [String], $assembly: String!) {\n    celltype(name: $name, assembly: $assembly) {\n      ct_image_url\n      wiki_desc\n    }\n  }\n": types.CellType2Document,
    "\n    query Dataset_Query(\n        $biosample: String\n        $processed_assembly: String\n        $replicated_peaks: Boolean\n        $include_investigatedas: [String]\n        $exclude_investigatedas: [String]\n    ) {\n        peakDataset(\n            biosample: $biosample\n            processed_assembly: $processed_assembly\n            replicated_peaks: $replicated_peaks\n            exclude_investigatedas: $exclude_investigatedas\n            include_investigatedas: $include_investigatedas\n        ) {\n            counts {\n                biosamples\n                targets\n                total\n            }\n            datasets {\n                lab {\n                    friendly_name\n                    name\n                }\n                target\n                released\n                accession\n                replicated_peaks: files(types: \"replicated_peaks\", assembly: $processed_assembly) {\n                    accession\n                }\n                released\n            }\n            partitionByTarget {\n                target {\n                    name\n                }\n                counts {\n                    total\n                    biosamples\n                }\n            }\n        }\n    }\n": types.Dataset_QueryDocument,
    "\n    query TF_INFO_Query(\n        $processed_assembly: String\n        $replicated_peaks: Boolean\n        $include_investigatedas: [String]\n        $exclude_investigatedas: [String]\n    ) {\n        peakDataset(\n            processed_assembly: $processed_assembly\n            replicated_peaks: $replicated_peaks\n            exclude_investigatedas: $exclude_investigatedas\n            include_investigatedas: $include_investigatedas\n        ) {\n            counts {\n                biosamples\n                targets\n                total\n            }\n            partitionByTarget {\n                target {\n                    name\n                }\n                counts {\n                    total\n                    biosamples\n                }\n            }\n            partitionByBiosample {\n                biosample {\n                    name\n                }\n                counts {\n                    total\n                    targets\n                }\n            }\n        }\n    }\n": types.Tf_Info_QueryDocument,
    "\n    query dnasemetadataquery($assembly: String!, $target: String!) {\n        histone_aggregate_values(assembly: $assembly) {\n            peaks_dataset_accession\n        }\n        peakDataset(processed_assembly: $assembly, target: $target) {\n            datasets {\n                accession\n                biosample\n            }\n        }\n    }\n": types.DnasemetadataqueryDocument,
    "\n    query aggregate($accession: String!) {\n        histone_aggregate_values(peaks_dataset_accession: $accession) {\n            histone_dataset_accession\n            distal_values\n            proximal_values\n        }\n    }\n": types.AggregateDocument,
    "\n    query metadata($accessions: [String!]) {\n        peakDataset(accession: $accessions) {\n            datasets {\n                accession\n                target\n            }\n        }\n    }\n": types.MetadataDocument,
    "\n    query atacagg($peaks_accession: [String!], $motif: String) {\n        atac_aggregate(peaks_accession: $peaks_accession, motif: $motif) {\n            forward_values\n            reverse_values\n        }\n        dnase_aggregate(peaks_accession: $peaks_accession, motif: $motif) {\n            forward_values\n            reverse_values\n        }\n    }\n": types.AtacaggDocument,
    "\n    query conservationagg($peaks_accession: [String!], $motif: String) {\n        conservation_aggregate(peaks_accession: $peaks_accession, motif: $motif) {\n            values\n            conservation_type\n        }\n    }\n": types.ConservationaggDocument,
    "\n  query MemeMotifSearch(\n    $assembly: String!\n    $pwms: [[[Float!]]]!\n    $limit: Int!\n    $offset: Int!\n  ) {\n    meme_motif_search(\n      pwms: $pwms\n      assembly: $assembly\n      limit: $limit\n      offset: $offset\n    ) {\n      results {\n        motif {\n          pwm\n          peaks_accession\n          tomtom_matches {\n            target_id\n            jaspar_name\n            e_value\n          }\n        }\n        distance\n        offset\n        reverseComplement\n      }\n      total\n    }\n  }\n": types.MemeMotifSearchDocument,
    "\n  query Experiment1($peak_accession: String) {\n    peakDataset(replicated_peak_accession: $peak_accession) {\n      datasets {\n        accession\n        lab {\n          friendly_name\n        }\n        target\n        biosample\n      }\n    }\n  }\n": types.Experiment1Document,
    "\n    query geneexpression($assembly: String!,$gene_id: [String]) {\n        gene_dataset(processed_assembly: $assembly) {\n            biosample\n            tissue\n            biosample_type\n            assay_term_name\n            accession\n            gene_quantification_files(assembly: $assembly) {\n                accession\n                quantifications(gene_id_prefix: $gene_id) {\n                    tpm\n                }\n            }\n        }\n    }\n": types.GeneexpressionDocument,
    "\n    query geneid($assembly: String!, $gene_name: [String]) {\n        gene(assembly: $assembly, name: $gene_name) {\n            id\n        }\n    }\n": types.GeneidDocument,
    "\n    query Experiment2($accession: [String]) {\n        peakDataset(accession: $accession) {\n            datasets {\n                lab {\n                    friendly_name\n                }\n                released\n                target\n                biosample\n                species\n                files(types: [\"replicated_peaks\"]) {\n                    accession\n                    ... on ReplicatedPeaks {\n                        assembly {\n                            name\n                        }\n                    }\n                }\n            }\n        }\n    }\n": types.Experiment2Document,
    "\n    query DatasetsQuery(\n        $target: String\n        $processed_assembly: String\n        $replicated_peaks: Boolean\n        $include_investigatedas: [String]\n        $exclude_investigatedas: [String]\n    ) {\n        peakDataset(\n            target: $target\n            processed_assembly: $processed_assembly\n            replicated_peaks: $replicated_peaks\n            exclude_investigatedas: $exclude_investigatedas\n            include_investigatedas: $include_investigatedas\n        ) {\n            counts {\n                total\n            }\n            datasets {\n                lab {\n                    friendly_name\n                    name\n                }\n                biosample\n                released\n                accession\n                replicated_peaks: files(types: \"replicated_peaks\", assembly: $processed_assembly) {\n                    accession\n                }\n                released\n            }\n            partitionByBiosample {\n                biosample {\n                    name\n                }\n                counts {\n                    total\n                    targets\n                }\n                datasets {\n                    lab {\n                        friendly_name\n                        name\n                    }\n                    accession\n                    replicated_peaks: files(types: \"replicated_peaks\", assembly: $processed_assembly) {\n                        accession\n                    }\n                }\n            }\n        }\n    }\n": types.DatasetsQueryDocument,
    "\n    query Factor($id: [String], $name: [String], $assembly: String!) {\n        factor(id: $id, name: $name, assembly: $assembly) {\n            name\n            gene_id\n            coordinates {\n                start\n                end\n                chromosome\n            }\n            pdbids\n            modifications {\n                symbol\n                modification {\n                    position\n                    modification\n                    amino_acid_code\n                }\n            }\n            ensemble_data {\n                id\n                biotype\n                description\n                display_name\n                hgnc_synonyms\n                hgnc_primary_id\n                uniprot_synonyms\n                uniprot_primary_id\n                version\n                ccds_id\n            }\n            hgnc_data {\n                hgnc_id\n                symbol\n                name\n                uniprot_ids\n                locus_type\n                locus_group\n                location\n                prev_name\n                gene_group\n                gene_group_id\n                ccds_id\n            }\n            uniprot_data\n            ncbi_data\n            factor_wiki\n        }\n    }\n": types.FactorDocument,
    "\n    query Datasets3(\n        $processed_assembly: String\n        $replicated_peaks: Boolean\n        $biosample: String\n        $include_investigatedas: [String]\n        $exclude_investigatedas: [String]\n    ) {\n        peakDataset(\n            processed_assembly: $processed_assembly\n            replicated_peaks: $replicated_peaks\n            biosample: $biosample\n            exclude_investigatedas: $exclude_investigatedas\n            include_investigatedas: $include_investigatedas\n        ) {\n            counts {\n                biosamples\n                targets\n                total\n            }\n            partitionByTarget {\n                target {\n                    name\n                }\n                counts {\n                    total\n                    biosamples\n                }\n            }\n            partitionByBiosample {\n                biosample {\n                    name\n                }\n                counts {\n                    total\n                    targets\n                }\n            }\n        }\n    }\n": types.Datasets3Document,
    "\n    query DLMotifsCounts(\n        $tf: String\n        $assay: String\n        $source: String\n        $selex_round: [Int]\n        $species: String\n        $accession: String\n    ) {\n        deep_learned_motifs_counts(\n            tf: $tf\n            source: $source\n            assay: $assay\n            selex_round: $selex_round\n            species: $species\n            accession: $accession\n        ) {\n            nonselexdlmotifs\n            selexdlmotifs\n        }\n    }\n": types.DlMotifsCountsDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query CellType1($name: [String], $assembly: String!) {\n        celltype(name: $name, assembly: $assembly) {\n            ct_image_url\n            wiki_desc\n            celltype\n        }\n    }\n"): (typeof documents)["\n    query CellType1($name: [String], $assembly: String!) {\n        celltype(name: $name, assembly: $assembly) {\n            ct_image_url\n            wiki_desc\n            celltype\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query Datasets2(\n        $biosample: String\n        $processed_assembly: String\n        $replicated_peaks: Boolean\n        $include_investigatedas: [String]\n        $exclude_investigatedas: [String]\n    ) {\n        peakDataset(\n            biosample: $biosample\n            processed_assembly: $processed_assembly\n            replicated_peaks: $replicated_peaks\n            exclude_investigatedas: $exclude_investigatedas\n            include_investigatedas: $include_investigatedas\n        ) {\n            counts {\n                biosamples\n                targets\n                total\n            }\n            datasets {\n                lab {\n                    friendly_name\n                    name\n                }\n                target\n                released\n                accession\n                replicated_peaks: files(types: \"replicated_peaks\", assembly: $processed_assembly) {\n                    accession\n                }\n                released\n            }\n            partitionByTarget {\n                target {\n                    name\n                }\n                counts {\n                    total\n                    biosamples\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query Datasets2(\n        $biosample: String\n        $processed_assembly: String\n        $replicated_peaks: Boolean\n        $include_investigatedas: [String]\n        $exclude_investigatedas: [String]\n    ) {\n        peakDataset(\n            biosample: $biosample\n            processed_assembly: $processed_assembly\n            replicated_peaks: $replicated_peaks\n            exclude_investigatedas: $exclude_investigatedas\n            include_investigatedas: $include_investigatedas\n        ) {\n            counts {\n                biosamples\n                targets\n                total\n            }\n            datasets {\n                lab {\n                    friendly_name\n                    name\n                }\n                target\n                released\n                accession\n                replicated_peaks: files(types: \"replicated_peaks\", assembly: $processed_assembly) {\n                    accession\n                }\n                released\n            }\n            partitionByTarget {\n                target {\n                    name\n                }\n                counts {\n                    total\n                    biosamples\n                }\n            }\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query Target_Query($accession: [String]) {\n    peakDataset(accession: $accession) {\n      datasets {    \n        target\n        species\n      }\n    }\n  }\n"): (typeof documents)["\n  query Target_Query($accession: [String]) {\n    peakDataset(accession: $accession) {\n      datasets {    \n        target\n        species\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query maf($positions: [PositionInput!]!) {\n        maf(positions: $positions) {\n            snp\n            refAllele\n            minorAlleles {\n                sequence\n                afr_af\n                amr_af\n                eas_af\n                eur_af\n                sas_af\n                frequency\n            }\n            position {\n                chromosome\n                position\n            }\n        }\n    }\n"): (typeof documents)["\n    query maf($positions: [PositionInput!]!) {\n        maf(positions: $positions) {\n            snp\n            refAllele\n            minorAlleles {\n                sequence\n                afr_af\n                amr_af\n                eas_af\n                eur_af\n                sas_af\n                frequency\n            }\n            position {\n                chromosome\n                position\n            }\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query snp(\n        $snpids: [String]\n        $assembly: String!\n        $population: Population!\n        $subpopulation: SubPopulation\n        $rSquaredThreshold: Float\n    ) {\n        snpQuery(snpids: $snpids, assembly: $assembly) {\n            refAllele\n            refFrequency\n            id\n            minorAlleleFrequency {\n                sequence\n                afr_af\n                amr_af\n                eas_af\n                eur_af\n                sas_af\n            }\n            coordinates {\n                chromosome\n                start\n                end\n            }\n            linkageDisequilibrium(\n                population: $population\n                subpopulation: $subpopulation\n                rSquaredThreshold: $rSquaredThreshold\n            ) {\n                rSquared\n                snp(assembly: $assembly) {\n                    refAllele\n                    refFrequency\n                    id\n                    minorAlleleFrequency {\n                        sequence\n                        afr_af\n                        amr_af\n                        eas_af\n                        eur_af\n                        sas_af\n                    }\n                    coordinates {\n                        chromosome\n                        start\n                        end\n                    }\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query snp(\n        $snpids: [String]\n        $assembly: String!\n        $population: Population!\n        $subpopulation: SubPopulation\n        $rSquaredThreshold: Float\n    ) {\n        snpQuery(snpids: $snpids, assembly: $assembly) {\n            refAllele\n            refFrequency\n            id\n            minorAlleleFrequency {\n                sequence\n                afr_af\n                amr_af\n                eas_af\n                eur_af\n                sas_af\n            }\n            coordinates {\n                chromosome\n                start\n                end\n            }\n            linkageDisequilibrium(\n                population: $population\n                subpopulation: $subpopulation\n                rSquaredThreshold: $rSquaredThreshold\n            ) {\n                rSquared\n                snp(assembly: $assembly) {\n                    refAllele\n                    refFrequency\n                    id\n                    minorAlleleFrequency {\n                        sequence\n                        afr_af\n                        amr_af\n                        eas_af\n                        eur_af\n                        sas_af\n                    }\n                    coordinates {\n                        chromosome\n                        start\n                        end\n                    }\n                }\n            }\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query peaks($assembly: String!, $range: [ChromosomeRangeInput]!) {\n        peaks(assembly: $assembly, range: $range) {\n            peaks {\n                q_value\n                experiment_accession\n                file_accession\n                dataset {\n                    target\n                    biosample\n                }\n                chrom\n                chrom_start\n                chrom_end\n            }\n        }\n    }\n"): (typeof documents)["\n    query peaks($assembly: String!, $range: [ChromosomeRangeInput]!) {\n        peaks(assembly: $assembly, range: $range) {\n            peaks {\n                q_value\n                experiment_accession\n                file_accession\n                dataset {\n                    target\n                    biosample\n                }\n                chrom\n                chrom_start\n                chrom_end\n            }\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query occurrences1($range: [GenomicRegionInput!]) {\n        meme_occurrences(genomic_region: $range) {\n            motif {\n                pwm\n                peaks_file {\n                    assembly\n                    accession\n                    dataset_accession\n                }\n                tomtom_matches {\n                    jaspar_name\n                    target_id\n                    e_value\n                }\n                flank_p_value\n                shuffled_p_value\n            }\n            strand\n            q_value\n            genomic_region {\n                chromosome\n                start\n                end\n            }\n        }\n    }\n"): (typeof documents)["\n    query occurrences1($range: [GenomicRegionInput!]) {\n        meme_occurrences(genomic_region: $range) {\n            motif {\n                pwm\n                peaks_file {\n                    assembly\n                    accession\n                    dataset_accession\n                }\n                tomtom_matches {\n                    jaspar_name\n                    target_id\n                    e_value\n                }\n                flank_p_value\n                shuffled_p_value\n            }\n            strand\n            q_value\n            genomic_region {\n                chromosome\n                start\n                end\n            }\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query occurrences2($range: [GenomicRegionInput!]!) {\n        rdhs_motif_occurrences(genomic_region: $range) {\n            motif {\n                pwm\n                peaks_file {\n                    assembly\n                    accession\n                    dataset_accession\n                }\n                tomtom_matches {\n                    jaspar_name\n                    target_id\n                    e_value\n                }\n                flank_p_value\n                shuffled_p_value\n            }\n            rdhs\n            strand\n            p_value\n            genomic_region {\n                chromosome\n                start\n                end\n            }\n        }\n    }\n"): (typeof documents)["\n    query occurrences2($range: [GenomicRegionInput!]!) {\n        rdhs_motif_occurrences(genomic_region: $range) {\n            motif {\n                pwm\n                peaks_file {\n                    assembly\n                    accession\n                    dataset_accession\n                }\n                tomtom_matches {\n                    jaspar_name\n                    target_id\n                    e_value\n                }\n                flank_p_value\n                shuffled_p_value\n            }\n            rdhs\n            strand\n            p_value\n            genomic_region {\n                chromosome\n                start\n                end\n            }\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query experiment_accessions(\n        $target: String\n        $processed_assembly: String\n        $replicated_peaks: Boolean\n        $include_investigatedas: [String]\n        $exclude_investigatedas: [String]\n    ) {\n        peakDataset(\n            target: $target\n            processed_assembly: $processed_assembly\n            replicated_peaks: $replicated_peaks\n            exclude_investigatedas: $exclude_investigatedas\n            include_investigatedas: $include_investigatedas\n        ) {\n            partitionByBiosample {\n                biosample {\n                    name\n                }\n                counts {\n                    total\n                    targets\n                }\n                datasets {\n                    lab {\n                        friendly_name\n                    }\n                    source\n                    biosample\n                    accession\n                    replicated_peaks: files(types: \"replicated_peaks\", assembly: $processed_assembly) {\n                        accession\n                    }\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query experiment_accessions(\n        $target: String\n        $processed_assembly: String\n        $replicated_peaks: Boolean\n        $include_investigatedas: [String]\n        $exclude_investigatedas: [String]\n    ) {\n        peakDataset(\n            target: $target\n            processed_assembly: $processed_assembly\n            replicated_peaks: $replicated_peaks\n            exclude_investigatedas: $exclude_investigatedas\n            include_investigatedas: $include_investigatedas\n        ) {\n            partitionByBiosample {\n                biosample {\n                    name\n                }\n                counts {\n                    total\n                    targets\n                }\n                datasets {\n                    lab {\n                        friendly_name\n                    }\n                    source\n                    biosample\n                    accession\n                    replicated_peaks: files(types: \"replicated_peaks\", assembly: $processed_assembly) {\n                        accession\n                    }\n                }\n            }\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query epigenetic_accessions($assembly: String!) {\n        histone_aggregate_values(assembly: $assembly) {\n            peaks_dataset_accession\n        }\n    }\n"): (typeof documents)["\n    query epigenetic_accessions($assembly: String!) {\n        histone_aggregate_values(assembly: $assembly) {\n            peaks_dataset_accession\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery signal($accession: [String], $assembly: String) {\n    peakDataset(accession: $accession) {\n      datasets {\n        files(types: [ \"normalized_signal\" ], assembly: $assembly) {\n          accession\n        }\n      }\n    }\n}\n"): (typeof documents)["\nquery signal($accession: [String], $assembly: String) {\n    peakDataset(accession: $accession) {\n      datasets {\n        files(types: [ \"normalized_signal\" ], assembly: $assembly) {\n          accession\n        }\n      }\n    }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query MemeMotifs($peaks_accession: [String]) {\n        meme_motifs(peaks_accession: $peaks_accession) {\n            consensus_regex\n            pwm\n            sites\n            e_value\n            original_peaks_occurrences\n            original_peaks\n            flank_occurrences_ratio\n            flank_z_score\n            flank_p_value\n            shuffled_occurrences_ratio\n            shuffled_z_score\n            shuffled_p_value\n            peak_centrality\n            id\n            name\n        }\n        target_motifs(peaks_accessions: $peaks_accession, e_value_threshold: 1e-2) {\n            e_value\n            target_id\n            sites\n            jaspar_name\n            motifid\n        }\n    }\n"): (typeof documents)["\n    query MemeMotifs($peaks_accession: [String]) {\n        meme_motifs(peaks_accession: $peaks_accession) {\n            consensus_regex\n            pwm\n            sites\n            e_value\n            original_peaks_occurrences\n            original_peaks\n            flank_occurrences_ratio\n            flank_z_score\n            flank_p_value\n            shuffled_occurrences_ratio\n            shuffled_z_score\n            shuffled_p_value\n            peak_centrality\n            id\n            name\n        }\n        target_motifs(peaks_accessions: $peaks_accession, e_value_threshold: 1e-2) {\n            e_value\n            target_id\n            sites\n            jaspar_name\n            motifid\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query peaksrange(\n        $experiment_accession: String\n        $file_accession: String\n        $target: String\n        $biosample: String\n        $range: [ChromosomeRangeInput]!\n        $assembly: String!\n        $limit: Int\n        $offset: Int\n        $orderby: Boolean\n    ) {\n        peaksrange(\n            experiment_accession: $experiment_accession\n            target: $target\n            biosample: $biosample\n            file_accession: $file_accession\n            range: $range\n            assembly: $assembly\n            limit: $limit\n            offset: $offset\n            orderby: $orderby\n        ) {\n            data\n            error {\n                message\n                errortype\n            }\n        }\n    }\n"): (typeof documents)["\n    query peaksrange(\n        $experiment_accession: String\n        $file_accession: String\n        $target: String\n        $biosample: String\n        $range: [ChromosomeRangeInput]!\n        $assembly: String!\n        $limit: Int\n        $offset: Int\n        $orderby: Boolean\n    ) {\n        peaksrange(\n            experiment_accession: $experiment_accession\n            target: $target\n            biosample: $biosample\n            file_accession: $file_accession\n            range: $range\n            assembly: $assembly\n            limit: $limit\n            offset: $offset\n            orderby: $orderby\n        ) {\n            data\n            error {\n                message\n                errortype\n            }\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query occurrences($range: [GenomicRegionInput!], $peaks_accession: String, $consensus_regex: String) {\n        meme_occurrences(genomic_region: $range, peaks_accession: $peaks_accession, consensus_regex: $consensus_regex) {\n            peaks_accession\n            strand\n            q_value\n            consensus_regex\n            genomic_region {\n                chromosome\n                start\n                end\n            }\n        }\n    }\n"): (typeof documents)["\n    query occurrences($range: [GenomicRegionInput!], $peaks_accession: String, $consensus_regex: String) {\n        meme_occurrences(genomic_region: $range, peaks_accession: $peaks_accession, consensus_regex: $consensus_regex) {\n            peaks_accession\n            strand\n            q_value\n            consensus_regex\n            genomic_region {\n                chromosome\n                start\n                end\n            }\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query motifsInPeak($genomic_region: [GenomicRegionInput!]!) {\n        meme_occurrences(genomic_region: $genomic_region) {\n            peaks_accession\n            consensus_regex\n            q_value\n            genomic_region {\n                chromosome\n                start\n                end\n            }\n            motif {\n                id\n                pwm\n                flank_z_score\n                flank_p_value\n                shuffled_z_score\n                shuffled_p_value\n            }\n        }\n    }\n"): (typeof documents)["\n    query motifsInPeak($genomic_region: [GenomicRegionInput!]!) {\n        meme_occurrences(genomic_region: $genomic_region) {\n            peaks_accession\n            consensus_regex\n            q_value\n            genomic_region {\n                chromosome\n                start\n                end\n            }\n            motif {\n                id\n                pwm\n                flank_z_score\n                flank_p_value\n                shuffled_z_score\n                shuffled_p_value\n            }\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query DeepLearnedMotifPeakOccurrences($genomic_region: [GenomicRegionInput!]!, $tf: String) {\n        deep_learned_motif_peak_occurrences(genomic_region: $genomic_region, tf: $tf) {\n            genomic_region {\n                chromosome\n                start\n                end\n            }\n            tf\n            sequence\n            rdhs\n            score\n            ppm\n            name\n            strand\n            number_of_datasets_instance_found_in\n            number_of_celltypes_instance_found_in\n            annotation\n            class_of_transposable_element\n        }\n    }\n"): (typeof documents)["\n    query DeepLearnedMotifPeakOccurrences($genomic_region: [GenomicRegionInput!]!, $tf: String) {\n        deep_learned_motif_peak_occurrences(genomic_region: $genomic_region, tf: $tf) {\n            genomic_region {\n                chromosome\n                start\n                end\n            }\n            tf\n            sequence\n            rdhs\n            score\n            ppm\n            name\n            strand\n            number_of_datasets_instance_found_in\n            number_of_celltypes_instance_found_in\n            annotation\n            class_of_transposable_element\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query DLMotifsSelex(\n        $tf: String\n        $assay: String\n        $source: String\n        $selex_round: [Int]\n        $species: String\n        $protein_type: String\n        $accession: String\n    ) {\n        deep_learned_motifs(\n            tf: $tf\n            source: $source\n            assay: $assay\n            selex_round: $selex_round\n            species: $species\n            accession: $accession\n            protein_type: $protein_type\n        ) {\n            selex_round\n            ppm\n            roc_curve\n            au_roc\n            fractional_enrichment\n        }\n    }\n"): (typeof documents)["\n    query DLMotifsSelex(\n        $tf: String\n        $assay: String\n        $source: String\n        $selex_round: [Int]\n        $species: String\n        $protein_type: String\n        $accession: String\n    ) {\n        deep_learned_motifs(\n            tf: $tf\n            source: $source\n            assay: $assay\n            selex_round: $selex_round\n            species: $species\n            accession: $accession\n            protein_type: $protein_type\n        ) {\n            selex_round\n            ppm\n            roc_curve\n            au_roc\n            fractional_enrichment\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query DLMotifsSelexMetadata(\n        $tf: String\n        $assay: String\n        $source: String\n        $selex_round: [Int]\n        $species: String\n        $protein_type: String\n        $accession: String\n    ) {\n        deep_learned_motifs(\n            tf: $tf\n            source: $source\n            assay: $assay\n            selex_round: $selex_round\n            species: $species\n            accession: $accession\n            protein_type: $protein_type\n        ) {\n            selex_round\n            source\n            tf\n            assay\n            protein_type\n        }\n    }\n"): (typeof documents)["\n    query DLMotifsSelexMetadata(\n        $tf: String\n        $assay: String\n        $source: String\n        $selex_round: [Int]\n        $species: String\n        $protein_type: String\n        $accession: String\n    ) {\n        deep_learned_motifs(\n            tf: $tf\n            source: $source\n            assay: $assay\n            selex_round: $selex_round\n            species: $species\n            accession: $accession\n            protein_type: $protein_type\n        ) {\n            selex_round\n            source\n            tf\n            assay\n            protein_type\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query tomtomMatches($peaks_accessions: [String!]!, $ids: [String!]!) {\n        target_motifs(peaks_accessions: $peaks_accessions, motif_id: $ids) {\n            target_id\n            e_value\n            jaspar_name\n        }\n    }\n"): (typeof documents)["\n    query tomtomMatches($peaks_accessions: [String!]!, $ids: [String!]!) {\n        target_motifs(peaks_accessions: $peaks_accessions, motif_id: $ids) {\n            target_id\n            e_value\n            jaspar_name\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query DLMotifsNonSelex(\n        $tf: String\n        $assay: String\n        $source: String\n        $selex_round: [Int]\n        $species: String\n        $accession: String\n    ) {\n        deep_learned_motifs(\n            tf: $tf\n            source: $source\n            assay: $assay\n            selex_round: $selex_round\n            species: $species\n            accession: $accession\n        ) {\n            tf\n            ppm\n            total_number_of_datasets_instance_found_in\n            total_number_of_celltypes_instance_found_in\n            consensus_regex\n        }\n    }\n"): (typeof documents)["\n    query DLMotifsNonSelex(\n        $tf: String\n        $assay: String\n        $source: String\n        $selex_round: [Int]\n        $species: String\n        $accession: String\n    ) {\n        deep_learned_motifs(\n            tf: $tf\n            source: $source\n            assay: $assay\n            selex_round: $selex_round\n            species: $species\n            accession: $accession\n        ) {\n            tf\n            ppm\n            total_number_of_datasets_instance_found_in\n            total_number_of_celltypes_instance_found_in\n            consensus_regex\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query CellType2($name: [String], $assembly: String!) {\n    celltype(name: $name, assembly: $assembly) {\n      ct_image_url\n      wiki_desc\n    }\n  }\n"): (typeof documents)["\n  query CellType2($name: [String], $assembly: String!) {\n    celltype(name: $name, assembly: $assembly) {\n      ct_image_url\n      wiki_desc\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query Dataset_Query(\n        $biosample: String\n        $processed_assembly: String\n        $replicated_peaks: Boolean\n        $include_investigatedas: [String]\n        $exclude_investigatedas: [String]\n    ) {\n        peakDataset(\n            biosample: $biosample\n            processed_assembly: $processed_assembly\n            replicated_peaks: $replicated_peaks\n            exclude_investigatedas: $exclude_investigatedas\n            include_investigatedas: $include_investigatedas\n        ) {\n            counts {\n                biosamples\n                targets\n                total\n            }\n            datasets {\n                lab {\n                    friendly_name\n                    name\n                }\n                target\n                released\n                accession\n                replicated_peaks: files(types: \"replicated_peaks\", assembly: $processed_assembly) {\n                    accession\n                }\n                released\n            }\n            partitionByTarget {\n                target {\n                    name\n                }\n                counts {\n                    total\n                    biosamples\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query Dataset_Query(\n        $biosample: String\n        $processed_assembly: String\n        $replicated_peaks: Boolean\n        $include_investigatedas: [String]\n        $exclude_investigatedas: [String]\n    ) {\n        peakDataset(\n            biosample: $biosample\n            processed_assembly: $processed_assembly\n            replicated_peaks: $replicated_peaks\n            exclude_investigatedas: $exclude_investigatedas\n            include_investigatedas: $include_investigatedas\n        ) {\n            counts {\n                biosamples\n                targets\n                total\n            }\n            datasets {\n                lab {\n                    friendly_name\n                    name\n                }\n                target\n                released\n                accession\n                replicated_peaks: files(types: \"replicated_peaks\", assembly: $processed_assembly) {\n                    accession\n                }\n                released\n            }\n            partitionByTarget {\n                target {\n                    name\n                }\n                counts {\n                    total\n                    biosamples\n                }\n            }\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query TF_INFO_Query(\n        $processed_assembly: String\n        $replicated_peaks: Boolean\n        $include_investigatedas: [String]\n        $exclude_investigatedas: [String]\n    ) {\n        peakDataset(\n            processed_assembly: $processed_assembly\n            replicated_peaks: $replicated_peaks\n            exclude_investigatedas: $exclude_investigatedas\n            include_investigatedas: $include_investigatedas\n        ) {\n            counts {\n                biosamples\n                targets\n                total\n            }\n            partitionByTarget {\n                target {\n                    name\n                }\n                counts {\n                    total\n                    biosamples\n                }\n            }\n            partitionByBiosample {\n                biosample {\n                    name\n                }\n                counts {\n                    total\n                    targets\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query TF_INFO_Query(\n        $processed_assembly: String\n        $replicated_peaks: Boolean\n        $include_investigatedas: [String]\n        $exclude_investigatedas: [String]\n    ) {\n        peakDataset(\n            processed_assembly: $processed_assembly\n            replicated_peaks: $replicated_peaks\n            exclude_investigatedas: $exclude_investigatedas\n            include_investigatedas: $include_investigatedas\n        ) {\n            counts {\n                biosamples\n                targets\n                total\n            }\n            partitionByTarget {\n                target {\n                    name\n                }\n                counts {\n                    total\n                    biosamples\n                }\n            }\n            partitionByBiosample {\n                biosample {\n                    name\n                }\n                counts {\n                    total\n                    targets\n                }\n            }\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query dnasemetadataquery($assembly: String!, $target: String!) {\n        histone_aggregate_values(assembly: $assembly) {\n            peaks_dataset_accession\n        }\n        peakDataset(processed_assembly: $assembly, target: $target) {\n            datasets {\n                accession\n                biosample\n            }\n        }\n    }\n"): (typeof documents)["\n    query dnasemetadataquery($assembly: String!, $target: String!) {\n        histone_aggregate_values(assembly: $assembly) {\n            peaks_dataset_accession\n        }\n        peakDataset(processed_assembly: $assembly, target: $target) {\n            datasets {\n                accession\n                biosample\n            }\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query aggregate($accession: String!) {\n        histone_aggregate_values(peaks_dataset_accession: $accession) {\n            histone_dataset_accession\n            distal_values\n            proximal_values\n        }\n    }\n"): (typeof documents)["\n    query aggregate($accession: String!) {\n        histone_aggregate_values(peaks_dataset_accession: $accession) {\n            histone_dataset_accession\n            distal_values\n            proximal_values\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query metadata($accessions: [String!]) {\n        peakDataset(accession: $accessions) {\n            datasets {\n                accession\n                target\n            }\n        }\n    }\n"): (typeof documents)["\n    query metadata($accessions: [String!]) {\n        peakDataset(accession: $accessions) {\n            datasets {\n                accession\n                target\n            }\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query atacagg($peaks_accession: [String!], $motif: String) {\n        atac_aggregate(peaks_accession: $peaks_accession, motif: $motif) {\n            forward_values\n            reverse_values\n        }\n        dnase_aggregate(peaks_accession: $peaks_accession, motif: $motif) {\n            forward_values\n            reverse_values\n        }\n    }\n"): (typeof documents)["\n    query atacagg($peaks_accession: [String!], $motif: String) {\n        atac_aggregate(peaks_accession: $peaks_accession, motif: $motif) {\n            forward_values\n            reverse_values\n        }\n        dnase_aggregate(peaks_accession: $peaks_accession, motif: $motif) {\n            forward_values\n            reverse_values\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query conservationagg($peaks_accession: [String!], $motif: String) {\n        conservation_aggregate(peaks_accession: $peaks_accession, motif: $motif) {\n            values\n            conservation_type\n        }\n    }\n"): (typeof documents)["\n    query conservationagg($peaks_accession: [String!], $motif: String) {\n        conservation_aggregate(peaks_accession: $peaks_accession, motif: $motif) {\n            values\n            conservation_type\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query MemeMotifSearch(\n    $assembly: String!\n    $pwms: [[[Float!]]]!\n    $limit: Int!\n    $offset: Int!\n  ) {\n    meme_motif_search(\n      pwms: $pwms\n      assembly: $assembly\n      limit: $limit\n      offset: $offset\n    ) {\n      results {\n        motif {\n          pwm\n          peaks_accession\n          tomtom_matches {\n            target_id\n            jaspar_name\n            e_value\n          }\n        }\n        distance\n        offset\n        reverseComplement\n      }\n      total\n    }\n  }\n"): (typeof documents)["\n  query MemeMotifSearch(\n    $assembly: String!\n    $pwms: [[[Float!]]]!\n    $limit: Int!\n    $offset: Int!\n  ) {\n    meme_motif_search(\n      pwms: $pwms\n      assembly: $assembly\n      limit: $limit\n      offset: $offset\n    ) {\n      results {\n        motif {\n          pwm\n          peaks_accession\n          tomtom_matches {\n            target_id\n            jaspar_name\n            e_value\n          }\n        }\n        distance\n        offset\n        reverseComplement\n      }\n      total\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query Experiment1($peak_accession: String) {\n    peakDataset(replicated_peak_accession: $peak_accession) {\n      datasets {\n        accession\n        lab {\n          friendly_name\n        }\n        target\n        biosample\n      }\n    }\n  }\n"): (typeof documents)["\n  query Experiment1($peak_accession: String) {\n    peakDataset(replicated_peak_accession: $peak_accession) {\n      datasets {\n        accession\n        lab {\n          friendly_name\n        }\n        target\n        biosample\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query geneexpression($assembly: String!,$gene_id: [String]) {\n        gene_dataset(processed_assembly: $assembly) {\n            biosample\n            tissue\n            biosample_type\n            assay_term_name\n            accession\n            gene_quantification_files(assembly: $assembly) {\n                accession\n                quantifications(gene_id_prefix: $gene_id) {\n                    tpm\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query geneexpression($assembly: String!,$gene_id: [String]) {\n        gene_dataset(processed_assembly: $assembly) {\n            biosample\n            tissue\n            biosample_type\n            assay_term_name\n            accession\n            gene_quantification_files(assembly: $assembly) {\n                accession\n                quantifications(gene_id_prefix: $gene_id) {\n                    tpm\n                }\n            }\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query geneid($assembly: String!, $gene_name: [String]) {\n        gene(assembly: $assembly, name: $gene_name) {\n            id\n        }\n    }\n"): (typeof documents)["\n    query geneid($assembly: String!, $gene_name: [String]) {\n        gene(assembly: $assembly, name: $gene_name) {\n            id\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query Experiment2($accession: [String]) {\n        peakDataset(accession: $accession) {\n            datasets {\n                lab {\n                    friendly_name\n                }\n                released\n                target\n                biosample\n                species\n                files(types: [\"replicated_peaks\"]) {\n                    accession\n                    ... on ReplicatedPeaks {\n                        assembly {\n                            name\n                        }\n                    }\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query Experiment2($accession: [String]) {\n        peakDataset(accession: $accession) {\n            datasets {\n                lab {\n                    friendly_name\n                }\n                released\n                target\n                biosample\n                species\n                files(types: [\"replicated_peaks\"]) {\n                    accession\n                    ... on ReplicatedPeaks {\n                        assembly {\n                            name\n                        }\n                    }\n                }\n            }\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query DatasetsQuery(\n        $target: String\n        $processed_assembly: String\n        $replicated_peaks: Boolean\n        $include_investigatedas: [String]\n        $exclude_investigatedas: [String]\n    ) {\n        peakDataset(\n            target: $target\n            processed_assembly: $processed_assembly\n            replicated_peaks: $replicated_peaks\n            exclude_investigatedas: $exclude_investigatedas\n            include_investigatedas: $include_investigatedas\n        ) {\n            counts {\n                total\n            }\n            datasets {\n                lab {\n                    friendly_name\n                    name\n                }\n                biosample\n                released\n                accession\n                replicated_peaks: files(types: \"replicated_peaks\", assembly: $processed_assembly) {\n                    accession\n                }\n                released\n            }\n            partitionByBiosample {\n                biosample {\n                    name\n                }\n                counts {\n                    total\n                    targets\n                }\n                datasets {\n                    lab {\n                        friendly_name\n                        name\n                    }\n                    accession\n                    replicated_peaks: files(types: \"replicated_peaks\", assembly: $processed_assembly) {\n                        accession\n                    }\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query DatasetsQuery(\n        $target: String\n        $processed_assembly: String\n        $replicated_peaks: Boolean\n        $include_investigatedas: [String]\n        $exclude_investigatedas: [String]\n    ) {\n        peakDataset(\n            target: $target\n            processed_assembly: $processed_assembly\n            replicated_peaks: $replicated_peaks\n            exclude_investigatedas: $exclude_investigatedas\n            include_investigatedas: $include_investigatedas\n        ) {\n            counts {\n                total\n            }\n            datasets {\n                lab {\n                    friendly_name\n                    name\n                }\n                biosample\n                released\n                accession\n                replicated_peaks: files(types: \"replicated_peaks\", assembly: $processed_assembly) {\n                    accession\n                }\n                released\n            }\n            partitionByBiosample {\n                biosample {\n                    name\n                }\n                counts {\n                    total\n                    targets\n                }\n                datasets {\n                    lab {\n                        friendly_name\n                        name\n                    }\n                    accession\n                    replicated_peaks: files(types: \"replicated_peaks\", assembly: $processed_assembly) {\n                        accession\n                    }\n                }\n            }\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query Factor($id: [String], $name: [String], $assembly: String!) {\n        factor(id: $id, name: $name, assembly: $assembly) {\n            name\n            gene_id\n            coordinates {\n                start\n                end\n                chromosome\n            }\n            pdbids\n            modifications {\n                symbol\n                modification {\n                    position\n                    modification\n                    amino_acid_code\n                }\n            }\n            ensemble_data {\n                id\n                biotype\n                description\n                display_name\n                hgnc_synonyms\n                hgnc_primary_id\n                uniprot_synonyms\n                uniprot_primary_id\n                version\n                ccds_id\n            }\n            hgnc_data {\n                hgnc_id\n                symbol\n                name\n                uniprot_ids\n                locus_type\n                locus_group\n                location\n                prev_name\n                gene_group\n                gene_group_id\n                ccds_id\n            }\n            uniprot_data\n            ncbi_data\n            factor_wiki\n        }\n    }\n"): (typeof documents)["\n    query Factor($id: [String], $name: [String], $assembly: String!) {\n        factor(id: $id, name: $name, assembly: $assembly) {\n            name\n            gene_id\n            coordinates {\n                start\n                end\n                chromosome\n            }\n            pdbids\n            modifications {\n                symbol\n                modification {\n                    position\n                    modification\n                    amino_acid_code\n                }\n            }\n            ensemble_data {\n                id\n                biotype\n                description\n                display_name\n                hgnc_synonyms\n                hgnc_primary_id\n                uniprot_synonyms\n                uniprot_primary_id\n                version\n                ccds_id\n            }\n            hgnc_data {\n                hgnc_id\n                symbol\n                name\n                uniprot_ids\n                locus_type\n                locus_group\n                location\n                prev_name\n                gene_group\n                gene_group_id\n                ccds_id\n            }\n            uniprot_data\n            ncbi_data\n            factor_wiki\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query Datasets3(\n        $processed_assembly: String\n        $replicated_peaks: Boolean\n        $biosample: String\n        $include_investigatedas: [String]\n        $exclude_investigatedas: [String]\n    ) {\n        peakDataset(\n            processed_assembly: $processed_assembly\n            replicated_peaks: $replicated_peaks\n            biosample: $biosample\n            exclude_investigatedas: $exclude_investigatedas\n            include_investigatedas: $include_investigatedas\n        ) {\n            counts {\n                biosamples\n                targets\n                total\n            }\n            partitionByTarget {\n                target {\n                    name\n                }\n                counts {\n                    total\n                    biosamples\n                }\n            }\n            partitionByBiosample {\n                biosample {\n                    name\n                }\n                counts {\n                    total\n                    targets\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query Datasets3(\n        $processed_assembly: String\n        $replicated_peaks: Boolean\n        $biosample: String\n        $include_investigatedas: [String]\n        $exclude_investigatedas: [String]\n    ) {\n        peakDataset(\n            processed_assembly: $processed_assembly\n            replicated_peaks: $replicated_peaks\n            biosample: $biosample\n            exclude_investigatedas: $exclude_investigatedas\n            include_investigatedas: $include_investigatedas\n        ) {\n            counts {\n                biosamples\n                targets\n                total\n            }\n            partitionByTarget {\n                target {\n                    name\n                }\n                counts {\n                    total\n                    biosamples\n                }\n            }\n            partitionByBiosample {\n                biosample {\n                    name\n                }\n                counts {\n                    total\n                    targets\n                }\n            }\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query DLMotifsCounts(\n        $tf: String\n        $assay: String\n        $source: String\n        $selex_round: [Int]\n        $species: String\n        $accession: String\n    ) {\n        deep_learned_motifs_counts(\n            tf: $tf\n            source: $source\n            assay: $assay\n            selex_round: $selex_round\n            species: $species\n            accession: $accession\n        ) {\n            nonselexdlmotifs\n            selexdlmotifs\n        }\n    }\n"): (typeof documents)["\n    query DLMotifsCounts(\n        $tf: String\n        $assay: String\n        $source: String\n        $selex_round: [Int]\n        $species: String\n        $accession: String\n    ) {\n        deep_learned_motifs_counts(\n            tf: $tf\n            source: $source\n            assay: $assay\n            selex_round: $selex_round\n            species: $species\n            accession: $accession\n        ) {\n            nonselexdlmotifs\n            selexdlmotifs\n        }\n    }\n"];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;